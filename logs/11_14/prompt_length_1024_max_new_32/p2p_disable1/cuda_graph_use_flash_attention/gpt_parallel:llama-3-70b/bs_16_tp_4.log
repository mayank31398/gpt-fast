W1118 21:52:37.660000 3648374 site-packages/torch/distributed/run.py:793] 
W1118 21:52:37.660000 3648374 site-packages/torch/distributed/run.py:793] *****************************************
W1118 21:52:37.660000 3648374 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1118 21:52:37.660000 3648374 site-packages/torch/distributed/run.py:793] *****************************************
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
our world size=4
Using device=cuda
Loading model ...
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
GPTParallel(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x ParallelTransformerBlock(
      semi_compiled = False
      (attention): FuseAttentionMLP(
        (wqkv1): Linear(in_features=8192, out_features=16896, bias=False)
        (wo): Linear(in_features=2048, out_features=8192, bias=False)
        (w2): Linear(in_features=7168, out_features=8192, bias=False)
      )
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.43 seconds
CUDA_GRAPH are activate
Prefill latency: 1.331731058191508 sec
Decode latency: 0.7982376809231937 sec
Compilation time: 2.14 seconds
Compilation time: 2.14 seconds
Compilation time: 2.13 seconds
Compilation time: 2.13 seconds
Prefill latency: 1.3306101323105395 sec
Decode latency: 0.7972915130667388 sec
Prefill latency: 1.3229284510016441 sec
Decode latency: 0.7969174250029027 sec
Prefill latency: 1.325540532823652 sec
Decode latency: 0.7961076479405165 sec
Prefill latency: 1.324277393054217 sec
Decode latency: 0.7967119910754263 sec
Prefill latency: 1.3246550220064819 sec
Decode latency: 0.7967144479043782 sec
Time for inference 1: 2.12 sec total, 241.29 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.32 sec
Bandwidth achieved: 8765.68 GB/s
FLOPS achieved: 289.27 TF/s

Prefill latency: 1.3244972308166325 sec
Decode latency: 0.7968143289908767 sec
Time for inference 2: 2.12 sec total, 241.30 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.32 sec
Bandwidth achieved: 8766.11 GB/s
FLOPS achieved: 289.28 TF/s

Prefill latency: 1.3254417828284204 sec
Decode latency: 0.7971256547607481 sec
Time for inference 3: 2.12 sec total, 241.14 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.33 sec
Bandwidth achieved: 8760.13 GB/s
FLOPS achieved: 289.08 TF/s

Prefill latency: 1.3323038341477513 sec
Decode latency: 0.796153306029737 sec
Time for inference 4: 2.13 sec total, 240.48 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.33 sec
Bandwidth achieved: 8736.21 GB/s
FLOPS achieved: 288.29 TF/s

Prefill latency: 1.3251946750096977 sec
Decode latency: 0.7974919378757477 sec
Time for inference 5: 2.12 sec total, 241.12 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.33 sec
Bandwidth achieved: 8759.38 GB/s
FLOPS achieved: 289.06 TF/s

Prefill latency: 1.3254082882776856 sec
Decode latency: 0.7975405491888523 sec
Time for inference 6: 2.12 sec total, 241.10 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.33 sec
Bandwidth achieved: 8758.56 GB/s
FLOPS achieved: 289.03 TF/s

Prefill latency: 1.3258165619336069 sec
Decode latency: 0.7965597328729928 sec
Time for inference 7: 2.12 sec total, 241.17 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.33 sec
Bandwidth achieved: 8761.27 GB/s
FLOPS achieved: 289.12 TF/s

Prefill latency: 1.3339585177600384 sec
Decode latency: 0.7967022801749408 sec
Time for inference 8: 2.13 sec total, 240.24 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.33 sec
Bandwidth achieved: 8727.50 GB/s
FLOPS achieved: 288.01 TF/s

Prefill latency: 1.3298722770996392 sec
Decode latency: 0.7980032796040177 sec
Time for inference 9: 2.13 sec total, 240.56 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.33 sec
Bandwidth achieved: 8739.08 GB/s
FLOPS achieved: 288.39 TF/s

Prefill latency: 1.3301419550552964 sec
Decode latency: 0.7970340251922607 sec
Time for inference 10: 2.13 sec total, 240.64 tokens/sec
Decode latency: 0.80 sec
Prefill latency: 1.33 sec
Bandwidth achieved: 8742.02 GB/s
FLOPS achieved: 288.49 TF/s

==========
Batch Size: 16
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.7970 sec
Average prefill latency: 1.3277 sec
Average tokens/sec: 240.90
Memory used: 68.59 GB
Done. we are killing the process
[rank0]:[W1118 21:53:27.118517876 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
