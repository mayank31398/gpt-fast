W1118 21:51:07.696000 3646424 site-packages/torch/distributed/run.py:793] 
W1118 21:51:07.696000 3646424 site-packages/torch/distributed/run.py:793] *****************************************
W1118 21:51:07.696000 3646424 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1118 21:51:07.696000 3646424 site-packages/torch/distributed/run.py:793] *****************************************
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
our world size=4
Using device=cuda
Loading model ...
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
GPTParallel(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x ParallelTransformerBlock(
      semi_compiled = False
      (attention): FuseAttentionMLP(
        (wqkv1): Linear(in_features=8192, out_features=16896, bias=False)
        (wo): Linear(in_features=2048, out_features=8192, bias=False)
        (w2): Linear(in_features=7168, out_features=8192, bias=False)
      )
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.30 seconds
CUDA_GRAPH are activate
Prefill latency: 0.33353772573173046 sec
Decode latency: 0.7613816517405212 sec
Compilation time: 1.13 seconds
Compilation time: 1.19 seconds
Compilation time: 1.13 seconds
Compilation time: 1.10 seconds
Prefill latency: 0.3370711891911924 sec
Decode latency: 0.7620149590075016 sec
Prefill latency: 0.3347876248881221 sec
Decode latency: 0.7616347330622375 sec
Prefill latency: 0.33538839500397444 sec
Decode latency: 0.7598508698865771 sec
Prefill latency: 0.3358169072307646 sec
Decode latency: 0.7620596359483898 sec
Prefill latency: 0.3331441613845527 sec
Decode latency: 0.7602642048150301 sec
Time for inference 1: 1.09 sec total, 117.01 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.33 sec
Bandwidth achieved: 4250.78 GB/s
FLOPS achieved: 140.28 TF/s

Prefill latency: 0.33452592277899384 sec
Decode latency: 0.7608005502261221 sec
Time for inference 2: 1.10 sec total, 116.81 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.33 sec
Bandwidth achieved: 4243.36 GB/s
FLOPS achieved: 140.03 TF/s

Prefill latency: 0.33340133633464575 sec
Decode latency: 0.7612752080895007 sec
Time for inference 3: 1.10 sec total, 116.88 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.33 sec
Bandwidth achieved: 4245.88 GB/s
FLOPS achieved: 140.11 TF/s

Prefill latency: 0.33471498219296336 sec
Decode latency: 0.760802264790982 sec
Time for inference 4: 1.10 sec total, 116.79 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.33 sec
Bandwidth achieved: 4242.68 GB/s
FLOPS achieved: 140.01 TF/s

Prefill latency: 0.3305403129197657 sec
Decode latency: 0.7609706888906658 sec
Time for inference 5: 1.09 sec total, 117.21 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.33 sec
Bandwidth achieved: 4257.99 GB/s
FLOPS achieved: 140.51 TF/s

Prefill latency: 0.3340781540609896 sec
Decode latency: 0.7619872791692615 sec
Time for inference 6: 1.10 sec total, 116.72 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.33 sec
Bandwidth achieved: 4240.38 GB/s
FLOPS achieved: 139.93 TF/s

Prefill latency: 0.3343516900204122 sec
Decode latency: 0.7603701031766832 sec
Time for inference 7: 1.10 sec total, 116.87 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.33 sec
Bandwidth achieved: 4245.62 GB/s
FLOPS achieved: 140.11 TF/s

Prefill latency: 0.3358683530241251 sec
Decode latency: 0.7606980730779469 sec
Time for inference 8: 1.10 sec total, 116.67 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.34 sec
Bandwidth achieved: 4238.58 GB/s
FLOPS achieved: 139.87 TF/s

Prefill latency: 0.33403452206403017 sec
Decode latency: 0.7613047691993415 sec
Time for inference 9: 1.10 sec total, 116.80 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.33 sec
Bandwidth achieved: 4243.30 GB/s
FLOPS achieved: 140.03 TF/s

Prefill latency: 0.3350491188466549 sec
Decode latency: 0.7598611079156399 sec
Time for inference 10: 1.10 sec total, 116.85 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.34 sec
Bandwidth achieved: 4244.92 GB/s
FLOPS achieved: 140.08 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.7608 sec
Average prefill latency: 0.3340 sec
Average tokens/sec: 116.86
Memory used: 46.01 GB
Done. we are killing the process
[rank0]:[W1118 21:51:35.909223753 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
