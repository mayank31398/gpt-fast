W1119 17:00:48.912000 3024049 site-packages/torch/distributed/run.py:793] 
W1119 17:00:48.912000 3024049 site-packages/torch/distributed/run.py:793] *****************************************
W1119 17:00:48.912000 3024049 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1119 17:00:48.912000 3024049 site-packages/torch/distributed/run.py:793] *****************************************
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
our world size=8
Using device=cuda
Loading model ...
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=1280, bias=False)
        (wo): Linear(in_features=1024, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.45 seconds
CUDA_GRAPH are activate
Prefill latency: 0.1605785598512739 sec
Compilation time: 0.63 seconds
Decode latency: 0.4648092589341104 sec
Compilation time: 0.63 seconds
Compilation time: 0.63 seconds
Compilation time: 0.62 seconds
Compilation time: 0.62 seconds
Prefill latency: 0.1614948429632932 sec
Compilation time: 0.62 seconds
Compilation time: 0.62 seconds
Compilation time: 0.63 seconds
Decode latency: 0.46686765807680786 sec
Prefill latency: 0.1614826200529933 sec
Decode latency: 0.4644955371040851 sec
Prefill latency: 0.16114053083583713 sec
Decode latency: 0.4657453049439937 sec
Prefill latency: 0.16292932210490108 sec
Decode latency: 0.46654468192718923 sec
Prefill latency: 0.16170743596740067 sec
Decode latency: 0.46600564289838076 sec
Time for inference 1: 0.63 sec total, 203.77 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3915.73 GB/s
FLOPS achieved: 129.22 TF/s

Prefill latency: 0.16108013107441366 sec
Decode latency: 0.46796259586699307 sec
Time for inference 2: 0.63 sec total, 203.34 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3907.59 GB/s
FLOPS achieved: 128.95 TF/s

Prefill latency: 0.16183868097141385 sec
Decode latency: 0.4655984230339527 sec
Time for inference 3: 0.63 sec total, 203.86 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3917.61 GB/s
FLOPS achieved: 129.28 TF/s

Prefill latency: 0.16187402000650764 sec
Decode latency: 0.4677570869680494 sec
Time for inference 4: 0.63 sec total, 203.16 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3903.98 GB/s
FLOPS achieved: 128.83 TF/s

Prefill latency: 0.161190863000229 sec
Decode latency: 0.4649352461565286 sec
Time for inference 5: 0.63 sec total, 204.29 tokens/sec
Decode latency: 0.46 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3925.84 GB/s
FLOPS achieved: 129.55 TF/s

Prefill latency: 0.16154650994576514 sec
Decode latency: 0.46603112085722387 sec
Time for inference 6: 0.63 sec total, 203.82 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3916.76 GB/s
FLOPS achieved: 129.25 TF/s

Prefill latency: 0.16234440705738962 sec
Decode latency: 0.46654486400075257 sec
Time for inference 7: 0.63 sec total, 203.40 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3908.68 GB/s
FLOPS achieved: 128.99 TF/s

Prefill latency: 0.16174247185699642 sec
Decode latency: 0.44417574000544846 sec
Time for inference 8: 0.61 sec total, 211.10 tokens/sec
Decode latency: 0.44 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 4056.62 GB/s
FLOPS achieved: 133.87 TF/s

Prefill latency: 0.16212806501425803 sec
Decode latency: 0.4670712510123849 sec
Time for inference 9: 0.63 sec total, 203.26 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3905.96 GB/s
FLOPS achieved: 128.90 TF/s

Prefill latency: 0.16197110596112907 sec
[rank7]:[W1119 17:01:06.139879533 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 7]  using GPU 7 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1119 17:01:06.279674954 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 0.466122412821278 sec
Time for inference 10: 0.63 sec total, 203.59 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3912.26 GB/s
FLOPS achieved: 129.10 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.4642 sec
Average prefill latency: 0.1617 sec
Average tokens/sec: 204.36
Memory used: 23.16 GB
[rank0]:[W1119 17:01:06.284670418 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1119 17:01:06.305664839 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank4]:[W1119 17:01:06.327797483 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 4]  using GPU 4 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank6]:[W1119 17:01:06.419590511 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 6]  using GPU 6 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank5]:[W1119 17:01:06.558508092 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 5]  using GPU 5 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1119 17:01:07.671829338 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1119 17:01:13.536816726 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
