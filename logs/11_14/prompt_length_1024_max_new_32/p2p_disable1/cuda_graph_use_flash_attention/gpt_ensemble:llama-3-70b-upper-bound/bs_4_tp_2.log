W1119 16:59:45.270000 3023204 site-packages/torch/distributed/run.py:793] 
W1119 16:59:45.270000 3023204 site-packages/torch/distributed/run.py:793] *****************************************
W1119 16:59:45.270000 3023204 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1119 16:59:45.270000 3023204 site-packages/torch/distributed/run.py:793] *****************************************
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
our world size=2
Using device=cuda
Loading model ...
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=5120, bias=False)
        (wo): Linear(in_features=4096, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=28672, bias=False)
        (w2): Linear(in_features=14336, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.21 seconds
CUDA_GRAPH are activate
Prefill latency: 0.5487223749514669 sec
Compilation time: 1.55 seconds
Decode latency: 0.9962545018643141 sec
Compilation time: 1.55 seconds
Prefill latency: 0.5478644839022309 sec
Decode latency: 0.9965586939360946 sec
Prefill latency: 0.5510876649059355 sec
Decode latency: 0.9961150190792978 sec
Prefill latency: 0.5507655020337552 sec
Decode latency: 0.9962745909579098 sec
Prefill latency: 0.5482428430113941 sec
Decode latency: 0.997890094993636 sec
Prefill latency: 0.5493994338903576 sec
Decode latency: 0.997141569154337 sec
Time for inference 1: 1.55 sec total, 82.74 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5837.61 GB/s
FLOPS achieved: 192.64 TF/s

Prefill latency: 0.5476823470089585 sec
Decode latency: 0.9962713511195034 sec
Time for inference 2: 1.54 sec total, 82.88 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5847.38 GB/s
FLOPS achieved: 192.96 TF/s

Prefill latency: 0.5471298107877374 sec
Decode latency: 0.9992040460929275 sec
Time for inference 3: 1.55 sec total, 82.75 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5838.45 GB/s
FLOPS achieved: 192.67 TF/s

Prefill latency: 0.5454623508267105 sec
Decode latency: 0.9959526790771633 sec
Time for inference 4: 1.54 sec total, 83.01 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5856.50 GB/s
FLOPS achieved: 193.26 TF/s

Prefill latency: 0.5498964940197766 sec
Decode latency: 0.9986654610838741 sec
Time for inference 5: 1.55 sec total, 82.63 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5829.65 GB/s
FLOPS achieved: 192.38 TF/s

Prefill latency: 0.5486135899554938 sec
Decode latency: 0.9985408240463585 sec
Time for inference 6: 1.55 sec total, 82.70 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5835.14 GB/s
FLOPS achieved: 192.56 TF/s

Prefill latency: 0.5518187249545008 sec
Decode latency: 0.9973842359613627 sec
Time for inference 7: 1.55 sec total, 82.59 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5827.43 GB/s
FLOPS achieved: 192.31 TF/s

Prefill latency: 0.5480730680283159 sec
Decode latency: 0.9977716968860477 sec
Time for inference 8: 1.55 sec total, 82.78 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5840.20 GB/s
FLOPS achieved: 192.73 TF/s

Prefill latency: 0.5495177209377289 sec
Decode latency: 0.9973675790242851 sec
Time for inference 9: 1.55 sec total, 82.72 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5836.28 GB/s
FLOPS achieved: 192.60 TF/s

Prefill latency: 0.5501837870106101 sec
[rank1]:[W1119 17:00:16.952852724 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 0.9979666301514953 sec
Time for inference 10: 1.55 sec total, 82.65 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5831.59 GB/s
FLOPS achieved: 192.44 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.9976 sec
Average prefill latency: 0.5488 sec
Average tokens/sec: 82.74
Memory used: 75.60 GB
[rank0]:[W1119 17:00:16.998398439 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1119 17:00:17.291036654 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
