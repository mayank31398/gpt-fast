W1119 17:04:08.991000 3027327 site-packages/torch/distributed/run.py:793] 
W1119 17:04:08.991000 3027327 site-packages/torch/distributed/run.py:793] *****************************************
W1119 17:04:08.991000 3027327 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1119 17:04:08.991000 3027327 site-packages/torch/distributed/run.py:793] *****************************************
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
our world size=4
Using device=cuda
Loading model ...
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=2560, bias=False)
        (wo): Linear(in_features=2048, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.53 seconds
CUDA_GRAPH are activate
Prefill latency: 4.7514818902127445 sec
Compilation time: 5.50 seconds
Decode latency: 0.7638056131545454 sec
Compilation time: 5.52 seconds
Compilation time: 5.52 seconds
Compilation time: 5.57 seconds
Prefill latency: 4.757486701011658 sec
Decode latency: 0.7645724108442664 sec
Prefill latency: 4.753618142101914 sec
Decode latency: 0.7649587399791926 sec
Prefill latency: 4.739894649013877 sec
Decode latency: 0.7647154729347676 sec
Prefill latency: 4.739451994886622 sec
Decode latency: 0.766205876134336 sec
Prefill latency: 4.7341037089936435 sec
Decode latency: 0.7645013998262584 sec
Time for inference 1: 5.50 sec total, 372.42 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 4.73 sec
Bandwidth achieved: 13529.75 GB/s
FLOPS achieved: 446.48 TF/s

Prefill latency: 4.741430095164105 sec
Decode latency: 0.7656079500447959 sec
Time for inference 2: 5.51 sec total, 371.84 tokens/sec
Decode latency: 0.77 sec
Prefill latency: 4.74 sec
Bandwidth achieved: 13508.68 GB/s
FLOPS achieved: 445.79 TF/s

Prefill latency: 4.74486273387447 sec
Decode latency: 0.7643419429659843 sec
Time for inference 3: 5.51 sec total, 371.70 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 4.74 sec
Bandwidth achieved: 13503.55 GB/s
FLOPS achieved: 445.62 TF/s

Prefill latency: 4.7379759380128235 sec
Decode latency: 0.7639319628942758 sec
Time for inference 4: 5.50 sec total, 372.19 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 4.74 sec
Bandwidth achieved: 13521.66 GB/s
FLOPS achieved: 446.21 TF/s

Prefill latency: 4.735010121949017 sec
Decode latency: 0.7650713790208101 sec
Time for inference 5: 5.50 sec total, 372.32 tokens/sec
Decode latency: 0.77 sec
Prefill latency: 4.74 sec
Bandwidth achieved: 13526.14 GB/s
FLOPS achieved: 446.36 TF/s

Prefill latency: 4.741574042011052 sec
Decode latency: 0.7643632711842656 sec
Time for inference 6: 5.51 sec total, 371.93 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 4.74 sec
Bandwidth achieved: 13511.88 GB/s
FLOPS achieved: 445.89 TF/s

Prefill latency: 4.743946706876159 sec
Decode latency: 0.764358322834596 sec
Time for inference 7: 5.51 sec total, 371.76 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 4.74 sec
Bandwidth achieved: 13506.00 GB/s
FLOPS achieved: 445.70 TF/s

Prefill latency: 4.738684648880735 sec
Decode latency: 0.7633850870188326 sec
Time for inference 8: 5.50 sec total, 372.18 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 4.74 sec
Bandwidth achieved: 13521.11 GB/s
FLOPS achieved: 446.20 TF/s

Prefill latency: 4.739613434066996 sec
Decode latency: 0.7635249178856611 sec
Time for inference 9: 5.50 sec total, 372.11 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 4.74 sec
Bandwidth achieved: 13518.73 GB/s
FLOPS achieved: 446.12 TF/s

Prefill latency: 4.742504139896482 sec
[rank1]:[W1119 17:05:53.607520336 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 0.7638957060407847 sec
Time for inference 10: 5.51 sec total, 371.89 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 4.74 sec
Bandwidth achieved: 13510.63 GB/s
FLOPS achieved: 445.85 TF/s

==========
Batch Size: 64
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.7643 sec
Average prefill latency: 4.7400 sec
Average tokens/sec: 372.03
Memory used: 71.71 GB
[rank0]:[W1119 17:05:53.890437460 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1119 17:05:53.175844854 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1119 17:05:54.971835552 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1119 17:05:56.224666847 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
