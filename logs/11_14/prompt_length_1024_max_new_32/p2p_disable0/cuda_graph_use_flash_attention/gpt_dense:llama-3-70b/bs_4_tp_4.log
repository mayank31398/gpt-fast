W1119 16:23:04.495000 2992701 site-packages/torch/distributed/run.py:793] 
W1119 16:23:04.495000 2992701 site-packages/torch/distributed/run.py:793] *****************************************
W1119 16:23:04.495000 2992701 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1119 16:23:04.495000 2992701 site-packages/torch/distributed/run.py:793] *****************************************
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
our world size=4
Using device=cuda
Loading model ...
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
GPTDense(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x DenseTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=2560, bias=False)
        (wo): Linear(in_features=2048, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.18 seconds
CUDA_GRAPH are activate
Prefill latency: 0.39406749000772834 sec
Decode latency: 0.7585486890748143 sec
Compilation time: 1.14 seconds
Compilation time: 1.11 seconds
Compilation time: 1.17 seconds
Compilation time: 1.15 seconds
Prefill latency: 0.35478600091300905 sec
Decode latency: 0.7591029379982501 sec
Prefill latency: 0.3559409899171442 sec
Decode latency: 0.7595236198976636 sec
Prefill latency: 0.3552685531321913 sec
Decode latency: 0.758443129947409 sec
Prefill latency: 0.3543199631385505 sec
Decode latency: 0.7580087049864233 sec
Prefill latency: 0.35542104416526854 sec
Decode latency: 0.7584576548542827 sec
Time for inference 1: 1.11 sec total, 114.86 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.36 sec
Bandwidth achieved: 4172.66 GB/s
FLOPS achieved: 137.70 TF/s

Prefill latency: 0.3553671929985285 sec
Decode latency: 0.7593485449906439 sec
Time for inference 2: 1.12 sec total, 114.77 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.36 sec
Bandwidth achieved: 4169.51 GB/s
FLOPS achieved: 137.59 TF/s

Prefill latency: 0.3547825089190155 sec
Decode latency: 0.757950090803206 sec
Time for inference 3: 1.11 sec total, 114.97 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.35 sec
Bandwidth achieved: 4176.93 GB/s
FLOPS achieved: 137.84 TF/s

Prefill latency: 0.3556249439716339 sec
Decode latency: 0.7585908891633153 sec
Time for inference 4: 1.11 sec total, 114.82 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.36 sec
Bandwidth achieved: 4171.33 GB/s
FLOPS achieved: 137.65 TF/s

Prefill latency: 0.3543974480126053 sec
Decode latency: 0.759371659019962 sec
Time for inference 5: 1.11 sec total, 114.86 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.35 sec
Bandwidth achieved: 4172.72 GB/s
FLOPS achieved: 137.70 TF/s

Prefill latency: 0.3554275871720165 sec
Decode latency: 0.7580948318354785 sec
Time for inference 6: 1.11 sec total, 114.90 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.36 sec
Bandwidth achieved: 4174.10 GB/s
FLOPS achieved: 137.75 TF/s

Prefill latency: 0.3550089520867914 sec
Decode latency: 0.7575521150138229 sec
Time for inference 7: 1.11 sec total, 114.99 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.36 sec
Bandwidth achieved: 4177.70 GB/s
FLOPS achieved: 137.86 TF/s

Prefill latency: 0.35436169896274805 sec
Decode latency: 0.7589244949631393 sec
Time for inference 8: 1.11 sec total, 114.91 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.35 sec
Bandwidth achieved: 4174.46 GB/s
FLOPS achieved: 137.76 TF/s

Prefill latency: 0.3552405668888241 sec
Decode latency: 0.7586153959855437 sec
Time for inference 9: 1.11 sec total, 114.85 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.36 sec
Bandwidth achieved: 4172.38 GB/s
FLOPS achieved: 137.69 TF/s

Prefill latency: 0.3549516659695655 sec
Decode latency: 0.7575840090867132 sec
Time for inference 10: 1.11 sec total, 115.00 tokens/sec
Decode latency: 0.76 sec
Prefill latency: 0.35 sec
Bandwidth achieved: 4177.97 GB/s
FLOPS achieved: 137.87 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.7584 sec
Average prefill latency: 0.3551 sec
Average tokens/sec: 114.89
Memory used: 55.30 GB
Done. we are killing the process
[rank0]:[W1119 16:23:33.600312109 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
