W1119 16:34:06.111000 3003797 site-packages/torch/distributed/run.py:793] 
W1119 16:34:06.111000 3003797 site-packages/torch/distributed/run.py:793] *****************************************
W1119 16:34:06.111000 3003797 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1119 16:34:06.111000 3003797 site-packages/torch/distributed/run.py:793] *****************************************
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
our world size=4
Using device=cuda
Loading model ...
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=2560, bias=False)
        (wo): Linear(in_features=2048, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.34 seconds
CUDA_GRAPH are activate
Prefill latency: 0.29285488999448717 sec
Compilation time: 0.95 seconds
Decode latency: 0.663147475104779 sec
Compilation time: 0.96 seconds
Compilation time: 0.95 seconds
Compilation time: 0.96 seconds
Prefill latency: 0.2956449040211737 sec
Decode latency: 0.6632306459359825 sec
Prefill latency: 0.29402954201214015 sec
Decode latency: 0.6631364428903908 sec
Prefill latency: 0.2956383409909904 sec
Decode latency: 0.6627516869921237 sec
Prefill latency: 0.2939081371296197 sec
Decode latency: 0.662690952885896 sec
Prefill latency: 0.2937539559789002 sec
Decode latency: 0.6628983002156019 sec
Time for inference 1: 0.96 sec total, 133.73 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.29 sec
Bandwidth achieved: 4858.39 GB/s
FLOPS achieved: 160.33 TF/s

Prefill latency: 0.29646375495940447 sec
Decode latency: 0.6629382651299238 sec
Time for inference 2: 0.96 sec total, 133.35 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 4844.42 GB/s
FLOPS achieved: 159.87 TF/s

Prefill latency: 0.2946325500961393 sec
Decode latency: 0.663560178829357 sec
Time for inference 3: 0.96 sec total, 133.50 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.29 sec
Bandwidth achieved: 4850.10 GB/s
FLOPS achieved: 160.05 TF/s

Prefill latency: 0.2951327778864652 sec
Decode latency: 0.6633745389990509 sec
Time for inference 4: 0.96 sec total, 133.47 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 4848.84 GB/s
FLOPS achieved: 160.01 TF/s

Prefill latency: 0.2956343940459192 sec
Decode latency: 0.6638027750886977 sec
Time for inference 5: 0.96 sec total, 133.34 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 4844.27 GB/s
FLOPS achieved: 159.86 TF/s

Prefill latency: 0.2934782209340483 sec
Decode latency: 0.663864147150889 sec
Time for inference 6: 0.96 sec total, 133.63 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.29 sec
Bandwidth achieved: 4854.77 GB/s
FLOPS achieved: 160.21 TF/s

Prefill latency: 0.2957160610239953 sec
Decode latency: 0.6574346490669996 sec
Time for inference 7: 0.95 sec total, 134.22 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 4876.20 GB/s
FLOPS achieved: 160.91 TF/s

Prefill latency: 0.294528353959322 sec
Decode latency: 0.6628456360194832 sec
Time for inference 8: 0.96 sec total, 133.63 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.29 sec
Bandwidth achieved: 4854.80 GB/s
FLOPS achieved: 160.21 TF/s

Prefill latency: 0.2971939609851688 sec
Decode latency: 0.6633824079763144 sec
Time for inference 9: 0.96 sec total, 133.18 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 4838.51 GB/s
FLOPS achieved: 159.67 TF/s

Prefill latency: 0.2952288151718676 sec
[rank3]:[W1119 16:34:28.845499084 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1119 16:34:28.922201578 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 0.6633050630334765 sec
Time for inference 10: 0.96 sec total, 133.47 tokens/sec
Decode latency: 0.66 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 4848.82 GB/s
FLOPS achieved: 160.01 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.6627 sec
Average prefill latency: 0.2952 sec
Average tokens/sec: 133.55
Memory used: 40.64 GB
[rank0]:[W1119 16:34:28.035291388 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1119 16:34:28.148191629 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1119 16:34:31.559395924 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
