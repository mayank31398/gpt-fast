W1119 16:32:33.522000 3001856 site-packages/torch/distributed/run.py:793] 
W1119 16:32:33.522000 3001856 site-packages/torch/distributed/run.py:793] *****************************************
W1119 16:32:33.522000 3001856 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1119 16:32:33.522000 3001856 site-packages/torch/distributed/run.py:793] *****************************************
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 4, global_world_size: 4
our world size=4
Using device=cuda
Loading model ...
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 2, global_rank: 2, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 1, global_rank: 1, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
rank: 3, global_rank: 3, world_size: 4, global_world_size: 4
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=2560, bias=False)
        (wo): Linear(in_features=2048, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.20 seconds
CUDA_GRAPH are activate
Prefill latency: 0.08160793292336166 sec
Compilation time: 0.70 seconds
Compilation time: 0.70 seconds
Compilation time: 0.71 seconds
Decode latency: 0.6276629529893398 sec
Compilation time: 0.71 seconds
Prefill latency: 0.08105474314652383 sec
Decode latency: 0.6284536509774625 sec
Prefill latency: 0.0812630879227072 sec
Decode latency: 0.6038917431142181 sec
Prefill latency: 0.08164361910894513 sec
Decode latency: 0.6270036480855197 sec
Prefill latency: 0.08151947520673275 sec
Decode latency: 0.628093030070886 sec
Prefill latency: 0.0810359138995409 sec
Decode latency: 0.6269753081724048 sec
Time for inference 1: 0.71 sec total, 45.16 tokens/sec
Decode latency: 0.63 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1640.78 GB/s
FLOPS achieved: 54.15 TF/s

Prefill latency: 0.08111097617074847 sec
Decode latency: 0.6282911079470068 sec
Time for inference 2: 0.71 sec total, 45.07 tokens/sec
Decode latency: 0.63 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1637.55 GB/s
FLOPS achieved: 54.04 TF/s

Prefill latency: 0.08095490490086377 sec
Decode latency: 0.6278878781013191 sec
Time for inference 3: 0.71 sec total, 45.11 tokens/sec
Decode latency: 0.63 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1638.84 GB/s
FLOPS achieved: 54.08 TF/s

Prefill latency: 0.08084437600336969 sec
Decode latency: 0.6286072111688554 sec
Time for inference 4: 0.71 sec total, 45.07 tokens/sec
Decode latency: 0.63 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1637.49 GB/s
FLOPS achieved: 54.04 TF/s

Prefill latency: 0.08054463309235871 sec
Decode latency: 0.6043564931023866 sec
Time for inference 5: 0.69 sec total, 46.69 tokens/sec
Decode latency: 0.60 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1696.24 GB/s
FLOPS achieved: 55.98 TF/s

Prefill latency: 0.0810797221492976 sec
Decode latency: 0.6281088897958398 sec
Time for inference 6: 0.71 sec total, 45.09 tokens/sec
Decode latency: 0.63 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1638.09 GB/s
FLOPS achieved: 54.06 TF/s

Prefill latency: 0.08045652019791305 sec
Decode latency: 0.6282608639448881 sec
Time for inference 7: 0.71 sec total, 45.12 tokens/sec
Decode latency: 0.63 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1639.17 GB/s
FLOPS achieved: 54.09 TF/s

Prefill latency: 0.08163474593311548 sec
Decode latency: 0.6271765329875052 sec
Time for inference 8: 0.71 sec total, 45.11 tokens/sec
Decode latency: 0.63 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1638.96 GB/s
FLOPS achieved: 54.09 TF/s

Prefill latency: 0.08119150693528354 sec
Decode latency: 0.6281791520304978 sec
Time for inference 9: 0.71 sec total, 45.05 tokens/sec
Decode latency: 0.63 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1636.63 GB/s
FLOPS achieved: 54.01 TF/s

Prefill latency: 0.08137852093204856 sec
[rank3]:[W1119 16:32:51.764821003 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1119 16:32:51.764940495 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 0.6286487511824816 sec
Time for inference 10: 0.71 sec total, 45.03 tokens/sec
Decode latency: 0.63 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1636.01 GB/s
FLOPS achieved: 53.99 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.6256 sec
Average prefill latency: 0.0810 sec
Average tokens/sec: 45.25
Memory used: 39.08 GB
[rank0]:[W1119 16:32:51.922289005 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1119 16:32:51.922659631 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1119 16:32:54.750367294 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
