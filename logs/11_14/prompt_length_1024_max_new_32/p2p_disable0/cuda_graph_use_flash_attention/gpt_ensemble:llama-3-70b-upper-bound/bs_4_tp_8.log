W1119 16:34:35.057000 3004306 site-packages/torch/distributed/run.py:793] 
W1119 16:34:35.057000 3004306 site-packages/torch/distributed/run.py:793] *****************************************
W1119 16:34:35.057000 3004306 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1119 16:34:35.057000 3004306 site-packages/torch/distributed/run.py:793] *****************************************
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
our world size=8
Using device=cuda
Loading model ...
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=1280, bias=False)
        (wo): Linear(in_features=1024, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.36 seconds
CUDA_GRAPH are activate
Prefill latency: 0.15911784814670682 sec
Decode latency: 0.466587824979797 sec
Compilation time: 0.63 seconds
Prefill latency: 0.1620304249227047 sec
Compilation time: 0.62 seconds
Compilation time: 0.63 seconds
Compilation time: 0.62 seconds
Compilation time: 0.63 seconds
Compilation time: 0.62 seconds
Compilation time: 0.63 seconds
Compilation time: 0.62 seconds
Decode latency: 0.46586435311473906 sec
Prefill latency: 0.16207928908988833 sec
Decode latency: 0.46706593106500804 sec
Prefill latency: 0.16176013997755945 sec
Decode latency: 0.46485898015089333 sec
Prefill latency: 0.16229441505856812 sec
Decode latency: 0.4665978739503771 sec
Prefill latency: 0.16223161108791828 sec
Decode latency: 0.4659221819601953 sec
Time for inference 1: 0.63 sec total, 203.58 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3912.18 GB/s
FLOPS achieved: 129.10 TF/s

Prefill latency: 0.16340776812285185 sec
Decode latency: 0.46616314677521586 sec
Time for inference 2: 0.63 sec total, 203.14 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3903.68 GB/s
FLOPS achieved: 128.82 TF/s

Prefill latency: 0.1617017718963325 sec
Decode latency: 0.4650414229836315 sec
Time for inference 3: 0.63 sec total, 204.06 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3921.37 GB/s
FLOPS achieved: 129.41 TF/s

Prefill latency: 0.16112659103237092 sec
Decode latency: 0.46605213708244264 sec
Time for inference 4: 0.63 sec total, 203.91 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3918.56 GB/s
FLOPS achieved: 129.31 TF/s

Prefill latency: 0.16241768095642328 sec
Decode latency: 0.46745152794755995 sec
Time for inference 5: 0.63 sec total, 203.03 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3901.59 GB/s
FLOPS achieved: 128.75 TF/s

Prefill latency: 0.16254060808569193 sec
Decode latency: 0.46573419007472694 sec
Time for inference 6: 0.63 sec total, 203.54 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3911.40 GB/s
FLOPS achieved: 129.08 TF/s

Prefill latency: 0.16196625283919275 sec
Decode latency: 0.46612369804643095 sec
Time for inference 7: 0.63 sec total, 203.60 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3912.58 GB/s
FLOPS achieved: 129.12 TF/s

Prefill latency: 0.16195580014027655 sec
Decode latency: 0.4661297700367868 sec
Time for inference 8: 0.63 sec total, 203.64 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3913.35 GB/s
FLOPS achieved: 129.14 TF/s

Prefill latency: 0.16266104904934764 sec
Decode latency: 0.4677712358534336 sec
Time for inference 9: 0.63 sec total, 202.88 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3898.72 GB/s
FLOPS achieved: 128.66 TF/s

Prefill latency: 0.16125462902709842 sec
Decode latency: 0.4656412450131029 sec
Time for inference 10: 0.63 sec total, 204.03 tokens/sec
Decode latency: 0.47 sec
Prefill latency: 0.16 sec
Bandwidth achieved: 3920.73 GB/s
FLOPS achieved: 129.38 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.4662 sec
Average prefill latency: 0.1621 sec
Average tokens/sec: 203.54
Memory used: 23.16 GB
[rank0]:[W1119 16:34:52.472740893 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank7]:[W1119 16:34:53.592397155 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 7]  using GPU 7 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank5]:[W1119 16:34:53.593738057 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 5]  using GPU 5 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1119 16:34:53.615189772 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank6]:[W1119 16:34:53.716528682 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 6]  using GPU 6 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1119 16:34:53.746826179 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank4]:[W1119 16:34:53.794417254 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 4]  using GPU 4 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1119 16:34:53.804970669 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1119 16:34:59.449142592 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
