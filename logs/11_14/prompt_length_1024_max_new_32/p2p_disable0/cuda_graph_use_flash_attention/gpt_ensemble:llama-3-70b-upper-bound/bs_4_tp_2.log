W1119 16:33:30.396000 3003465 site-packages/torch/distributed/run.py:793] 
W1119 16:33:30.396000 3003465 site-packages/torch/distributed/run.py:793] *****************************************
W1119 16:33:30.396000 3003465 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1119 16:33:30.396000 3003465 site-packages/torch/distributed/run.py:793] *****************************************
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 2, global_world_size: 2
our world size=2
Using device=cuda
Loading model ...
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
rank: 1, global_rank: 1, world_size: 2, global_world_size: 2
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=5120, bias=False)
        (wo): Linear(in_features=4096, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=28672, bias=False)
        (w2): Linear(in_features=14336, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.48 seconds
CUDA_GRAPH are activate
Prefill latency: 0.5533572400454432 sec
Compilation time: 1.55 seconds
Decode latency: 0.9797649059910327 sec
Compilation time: 1.53 seconds
Prefill latency: 0.5495576709508896 sec
Decode latency: 0.9987871979828924 sec
Prefill latency: 0.5484845119062811 sec
Decode latency: 0.9973075760062784 sec
Prefill latency: 0.549655970884487 sec
Decode latency: 0.9968464900739491 sec
Prefill latency: 0.5489243757911026 sec
Decode latency: 0.9984056758694351 sec
Prefill latency: 0.5515155030880123 sec
Decode latency: 0.9972061470616609 sec
Time for inference 1: 1.55 sec total, 82.62 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5829.31 GB/s
FLOPS achieved: 192.37 TF/s

Prefill latency: 0.5464147001039237 sec
Decode latency: 0.9965988870244473 sec
Time for inference 2: 1.54 sec total, 82.93 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5850.95 GB/s
FLOPS achieved: 193.08 TF/s

Prefill latency: 0.5496761719696224 sec
Decode latency: 0.997163760010153 sec
Time for inference 3: 1.55 sec total, 82.72 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5836.42 GB/s
FLOPS achieved: 192.60 TF/s

Prefill latency: 0.5503942649811506 sec
Decode latency: 0.9972887481562793 sec
Time for inference 4: 1.55 sec total, 82.68 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5833.37 GB/s
FLOPS achieved: 192.50 TF/s

Prefill latency: 0.5497954320162535 sec
Decode latency: 0.9963663099333644 sec
Time for inference 5: 1.55 sec total, 82.76 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5839.05 GB/s
FLOPS achieved: 192.69 TF/s

Prefill latency: 0.5469203309621662 sec
Decode latency: 0.997555126901716 sec
Time for inference 6: 1.54 sec total, 82.85 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5845.39 GB/s
FLOPS achieved: 192.90 TF/s

Prefill latency: 0.5490343959536403 sec
Decode latency: 0.9990293991286308 sec
Time for inference 7: 1.55 sec total, 82.66 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5831.90 GB/s
FLOPS achieved: 192.45 TF/s

Prefill latency: 0.5503161170054227 sec
Decode latency: 0.9970619180239737 sec
Time for inference 8: 1.55 sec total, 82.69 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5834.52 GB/s
FLOPS achieved: 192.54 TF/s

Prefill latency: 0.5516571989282966 sec
Decode latency: 0.9979288629256189 sec
Time for inference 9: 1.55 sec total, 82.58 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5826.29 GB/s
FLOPS achieved: 192.27 TF/s

Prefill latency: 0.5508329609874636 sec
[rank1]:[W1119 16:34:01.163731846 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 0.9955014258157462 sec
Time for inference 10: 1.55 sec total, 82.75 tokens/sec
Decode latency: 1.00 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 5838.44 GB/s
FLOPS achieved: 192.67 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 32
Average decode latency: 0.9972 sec
Average prefill latency: 0.5497 sec
Average tokens/sec: 82.72
Memory used: 75.60 GB
[rank0]:[W1119 16:34:01.486278020 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1119 16:34:03.800884081 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
