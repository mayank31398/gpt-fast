W1114 02:33:40.725000 2335845 site-packages/torch/distributed/run.py:793] 
W1114 02:33:40.725000 2335845 site-packages/torch/distributed/run.py:793] *****************************************
W1114 02:33:40.725000 2335845 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 02:33:40.725000 2335845 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTLadder(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x LadderTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 0.67 seconds
CUDA_GRAPH are activate
[rank1]:[W1114 02:33:56.840555681 CUDAGraph.cpp:133] Warning: Waiting for pending NCCL work to finish before starting graph capture. (function operator())
[rank2]:[W1114 02:33:56.846474294 CUDAGraph.cpp:133] Warning: Waiting for pending NCCL work to finish before starting graph capture. (function operator())
[rank3]:[W1114 02:33:56.876435982 CUDAGraph.cpp:133] Warning: Waiting for pending NCCL work to finish before starting graph capture. (function operator())
Prefill latency: 0.7736880760639906 sec
Decode latency: 3.736488416790962 sec
Compilation time: 4.57 seconds
Compilation time: 4.56 secondsCompilation time: 4.57 seconds

Compilation time: 4.59 seconds
Prefill latency: 0.7355491481721401 sec
Decode latency: 3.7427931409329176 sec
Prefill latency: 0.735267261043191 sec
Decode latency: 3.743266813457012 sec
Prefill latency: 0.743549220263958 sec
Decode latency: 3.7431976292282343 sec
Prefill latency: 0.7437484823167324 sec
Decode latency: 3.7432914581149817 sec
Prefill latency: 0.7363272588700056 sec
Decode latency: 3.744751751422882 sec
Time for inference 1: 4.48 sec total, 7310.83 tokens/sec
Decode latency: 3.74 sec
Prefill latency: 0.74 sec
Bandwidth achieved: 33197.52 GB/s
FLOPS achieved: 99.59 TF/s

Prefill latency: 0.7344347164034843 sec
Decode latency: 3.7451681289821863 sec
Time for inference 2: 4.48 sec total, 7312.93 tokens/sec
Decode latency: 3.75 sec
Prefill latency: 0.73 sec
Bandwidth achieved: 33207.03 GB/s
FLOPS achieved: 99.62 TF/s

Prefill latency: 0.7347810659557581 sec
Decode latency: 3.744354883208871 sec
Time for inference 3: 4.48 sec total, 7313.66 tokens/sec
Decode latency: 3.74 sec
Prefill latency: 0.73 sec
Bandwidth achieved: 33210.35 GB/s
FLOPS achieved: 99.63 TF/s

Prefill latency: 0.7386029325425625 sec
Decode latency: 3.7426579240709543 sec
Time for inference 4: 4.48 sec total, 7310.46 tokens/sec
Decode latency: 3.74 sec
Prefill latency: 0.74 sec
Bandwidth achieved: 33195.83 GB/s
FLOPS achieved: 99.59 TF/s

Prefill latency: 0.7408930659294128 sec
Decode latency: 3.742678349837661 sec
Time for inference 5: 4.48 sec total, 7306.77 tokens/sec
Decode latency: 3.74 sec
Prefill latency: 0.74 sec
Bandwidth achieved: 33179.05 GB/s
FLOPS achieved: 99.54 TF/s

Prefill latency: 0.7409884668886662 sec
Decode latency: 3.7425082586705685 sec
Time for inference 6: 4.48 sec total, 7306.99 tokens/sec
Decode latency: 3.74 sec
Prefill latency: 0.74 sec
Bandwidth achieved: 33180.08 GB/s
FLOPS achieved: 99.54 TF/s

Prefill latency: 0.7373671643435955 sec
Decode latency: 3.745509820058942 sec
Time for inference 7: 4.48 sec total, 7307.82 tokens/sec
Decode latency: 3.75 sec
Prefill latency: 0.74 sec
Bandwidth achieved: 33183.83 GB/s
FLOPS achieved: 99.55 TF/s

Prefill latency: 0.7342500668019056 sec
Decode latency: 3.7458355762064457 sec
Time for inference 8: 4.48 sec total, 7312.54 tokens/sec
Decode latency: 3.75 sec
Prefill latency: 0.73 sec
Bandwidth achieved: 33205.29 GB/s
FLOPS achieved: 99.62 TF/s

Prefill latency: 0.7364958170801401 sec
Decode latency: 3.742517415434122 sec
Time for inference 9: 4.48 sec total, 7313.87 tokens/sec
Decode latency: 3.74 sec
Prefill latency: 0.74 sec
Bandwidth achieved: 33211.32 GB/s
FLOPS achieved: 99.63 TF/s

Prefill latency: 0.7360506951808929 sec
Decode latency: 3.743354534730315 sec
Time for inference 10: 4.48 sec total, 7313.47 tokens/sec
Decode latency: 3.74 sec
Prefill latency: 0.74 sec
Bandwidth achieved: 33209.48 GB/s
FLOPS achieved: 99.63 TF/s

==========
Batch Size: 64
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 3.7439 sec
Average prefill latency: 0.7370 sec
Average tokens/sec: 7310.93
Memory used: 77.09 GB
Done. we are killing the process
[rank0]:[W1114 02:35:03.532848105 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
