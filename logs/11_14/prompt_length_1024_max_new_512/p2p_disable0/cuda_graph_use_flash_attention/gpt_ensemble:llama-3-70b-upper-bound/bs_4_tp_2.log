W1114 04:33:24.455000 2327385 site-packages/torch/distributed/run.py:793] 
W1114 04:33:24.455000 2327385 site-packages/torch/distributed/run.py:793] *****************************************
W1114 04:33:24.455000 2327385 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 04:33:24.455000 2327385 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=5120, bias=False)
        (wo): Linear(in_features=4096, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=28672, bias=False)
        (w2): Linear(in_features=14336, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.44 seconds
CUDA_GRAPH are activate
Prefill latency: 0.5557898823171854 sec
Compilation time: 16.69 seconds
Decode latency: 16.444862011820078 sec
Compilation time: 17.00 seconds
Prefill latency: 0.5551628461107612 sec
Decode latency: 16.4441634779796 sec
Prefill latency: 0.5528511507436633 sec
Decode latency: 16.445004841312766 sec
Prefill latency: 0.5536942323669791 sec
Decode latency: 16.374187180772424 sec
Prefill latency: 0.5543795609846711 sec
Decode latency: 16.446198416873813 sec
Prefill latency: 0.5527995200827718 sec
Decode latency: 16.445265682414174 sec
Time for inference 1: 17.00 sec total, 120.47 tokens/sec
Decode latency: 16.45 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 8500.08 GB/s
FLOPS achieved: 25.50 TF/s

Prefill latency: 0.5544142508879304 sec
Decode latency: 16.445811309851706 sec
Time for inference 2: 17.00 sec total, 120.46 tokens/sec
Decode latency: 16.45 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 8498.83 GB/s
FLOPS achieved: 25.50 TF/s

Prefill latency: 0.5543546285480261 sec
Decode latency: 16.446106845512986 sec
Time for inference 3: 17.00 sec total, 120.46 tokens/sec
Decode latency: 16.45 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 8499.00 GB/s
FLOPS achieved: 25.50 TF/s

Prefill latency: 0.5526328356936574 sec
Decode latency: 16.445361264050007 sec
Time for inference 4: 17.00 sec total, 120.48 tokens/sec
Decode latency: 16.45 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 8500.20 GB/s
FLOPS achieved: 25.50 TF/s

Prefill latency: 0.5527650574222207 sec
Decode latency: 16.445442395284772 sec
Time for inference 5: 17.00 sec total, 120.47 tokens/sec
Decode latency: 16.45 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 8500.07 GB/s
FLOPS achieved: 25.50 TF/s

Prefill latency: 0.5532877668738365 sec
Decode latency: 16.445620683021843 sec
Time for inference 6: 17.00 sec total, 120.47 tokens/sec
Decode latency: 16.45 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 8499.73 GB/s
FLOPS achieved: 25.50 TF/s

Prefill latency: 0.5566601883620024 sec
Decode latency: 16.445589399896562 sec
Time for inference 7: 17.00 sec total, 120.45 tokens/sec
Decode latency: 16.45 sec
Prefill latency: 0.56 sec
Bandwidth achieved: 8498.10 GB/s
FLOPS achieved: 25.49 TF/s

Prefill latency: 0.5530013833194971 sec
Decode latency: 16.418661161325872 sec
Time for inference 8: 16.97 sec total, 120.66 tokens/sec
Decode latency: 16.42 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 8513.39 GB/s
FLOPS achieved: 25.54 TF/s

Prefill latency: 0.5503342784941196 sec
Decode latency: 16.44548552017659 sec
Time for inference 9: 17.00 sec total, 120.49 tokens/sec
Decode latency: 16.45 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 8501.23 GB/s
FLOPS achieved: 25.50 TF/s

Prefill latency: 0.5531477248296142 sec
[rank1]:[W1114 04:37:46.664653409 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 16.446240309625864 sec
Time for inference 10: 17.00 sec total, 120.47 tokens/sec
Decode latency: 16.45 sec
Prefill latency: 0.55 sec
Bandwidth achieved: 8499.52 GB/s
FLOPS achieved: 25.50 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 16.4430 sec
Average prefill latency: 0.5533 sec
Average tokens/sec: 120.49
Memory used: 75.89 GB
[rank0]:[W1114 04:37:47.935812908 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 04:37:48.295105411 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
