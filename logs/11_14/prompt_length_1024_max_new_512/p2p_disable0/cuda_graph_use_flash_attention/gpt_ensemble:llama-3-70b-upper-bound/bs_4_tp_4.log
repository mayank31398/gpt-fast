W1114 04:37:52.357000 2328143 site-packages/torch/distributed/run.py:793] 
W1114 04:37:52.357000 2328143 site-packages/torch/distributed/run.py:793] *****************************************
W1114 04:37:52.357000 2328143 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 04:37:52.357000 2328143 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=2560, bias=False)
        (wo): Linear(in_features=2048, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.59 seconds
CUDA_GRAPH are activate
Prefill latency: 0.2974029928445816 sec
Compilation time: 11.01 seconds
Decode latency: 10.713440637104213 sec
Compilation time: 11.01 seconds
Compilation time: 11.11 seconds
Prefill latency: 0.2968999659642577 sec
Compilation time: 11.40 seconds
Decode latency: 10.715520907193422 sec
Prefill latency: 0.29751560650765896 sec
Decode latency: 10.713774976320565 sec
Prefill latency: 0.2975039640441537 sec
Decode latency: 10.713132626377046 sec
Prefill latency: 0.29658708442002535 sec
Decode latency: 10.715264116413891 sec
Prefill latency: 0.2974668527022004 sec
Decode latency: 10.715578911826015 sec
Time for inference 1: 11.01 sec total, 185.94 tokens/sec
Decode latency: 10.72 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 6755.16 GB/s
FLOPS achieved: 20.27 TF/s

Prefill latency: 0.2979520922526717 sec
Decode latency: 10.714388202875853 sec
Time for inference 2: 11.01 sec total, 185.95 tokens/sec
Decode latency: 10.71 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 6755.65 GB/s
FLOPS achieved: 20.27 TF/s

Prefill latency: 0.29712584987282753 sec
Decode latency: 10.714718249626458 sec
Time for inference 3: 11.01 sec total, 185.96 tokens/sec
Decode latency: 10.71 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 6755.85 GB/s
FLOPS achieved: 20.27 TF/s

Prefill latency: 0.2997431457042694 sec
Decode latency: 10.714766513556242 sec
Time for inference 4: 11.02 sec total, 185.92 tokens/sec
Decode latency: 10.71 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 6754.30 GB/s
FLOPS achieved: 20.26 TF/s

Prefill latency: 0.2989660445600748 sec
Decode latency: 10.714237311854959 sec
Time for inference 5: 11.01 sec total, 185.94 tokens/sec
Decode latency: 10.71 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 6755.08 GB/s
FLOPS achieved: 20.27 TF/s

Prefill latency: 0.29932681284844875 sec
Decode latency: 10.71547856554389 sec
Time for inference 6: 11.02 sec total, 185.91 tokens/sec
Decode latency: 10.72 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 6754.03 GB/s
FLOPS achieved: 20.26 TF/s

Prefill latency: 0.29646041616797447 sec
Decode latency: 10.329451917670667 sec
Time for inference 7: 10.63 sec total, 192.72 tokens/sec
Decode latency: 10.33 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 7001.24 GB/s
FLOPS achieved: 21.00 TF/s

Prefill latency: 0.2993175657466054 sec
Decode latency: 10.715738299302757 sec
Time for inference 8: 11.02 sec total, 185.91 tokens/sec
Decode latency: 10.72 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 6753.90 GB/s
FLOPS achieved: 20.26 TF/s

Prefill latency: 0.2975120125338435 sec
Decode latency: 10.71422850806266 sec
Time for inference 9: 11.01 sec total, 185.96 tokens/sec
Decode latency: 10.71 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 6755.93 GB/s
FLOPS achieved: 20.27 TF/s

Prefill latency: 0.29873758368194103 sec
Decode latency: 10.716272896155715 sec
Time for inference 10: 11.02 sec total, 185.91 tokens/sec
Decode latency: 10.72 sec
Prefill latency: 0.30 sec
Bandwidth achieved: 6753.98 GB/s
FLOPS achieved: 20.26 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 10.6765 sec
Average prefill latency: 0.2983 sec
Average tokens/sec: 186.61
Memory used: 40.83 GB
[rank0]:[W1114 04:40:45.101818150 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1114 04:40:45.335231444 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1114 04:40:47.883580810 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1114 04:40:51.451729407 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 04:40:54.979516528 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
