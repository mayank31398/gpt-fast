W1114 04:28:17.775000 2325307 site-packages/torch/distributed/run.py:793] 
W1114 04:28:17.775000 2325307 site-packages/torch/distributed/run.py:793] *****************************************
W1114 04:28:17.775000 2325307 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 04:28:17.775000 2325307 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=2560, bias=False)
        (wo): Linear(in_features=2048, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.51 seconds
CUDA_GRAPH are activate
Prefill latency: 0.08191071264445782 sec
Compilation time: 9.83 seconds
Compilation time: 10.19 seconds
Decode latency: 10.147618538700044 sec
Compilation time: 10.23 seconds
Prefill latency: 0.0819014199078083 sec
Compilation time: 10.43 seconds
Decode latency: 10.153658853843808 sec
Prefill latency: 0.08213554043322802 sec
Decode latency: 10.139145348221064 sec
Prefill latency: 0.08187671657651663 sec
Decode latency: 10.151946262456477 sec
Prefill latency: 0.08201417699456215 sec
Decode latency: 10.156940883025527 sec
Prefill latency: 0.0822769207879901 sec
Decode latency: 10.137018993496895 sec
Time for inference 1: 10.22 sec total, 50.10 tokens/sec
Decode latency: 10.14 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1819.97 GB/s
FLOPS achieved: 5.46 TF/s

Prefill latency: 0.08205310348421335 sec
Decode latency: 10.028232564218342 sec
Time for inference 2: 10.11 sec total, 50.64 tokens/sec
Decode latency: 10.03 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1839.59 GB/s
FLOPS achieved: 5.52 TF/s

Prefill latency: 0.0822842214256525 sec
Decode latency: 9.727927105501294 sec
Time for inference 3: 9.81 sec total, 52.19 tokens/sec
Decode latency: 9.73 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1895.86 GB/s
FLOPS achieved: 5.69 TF/s

Prefill latency: 0.08189647551625967 sec
Decode latency: 9.759710210375488 sec
Time for inference 4: 9.84 sec total, 52.02 tokens/sec
Decode latency: 9.76 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1889.80 GB/s
FLOPS achieved: 5.67 TF/s

Prefill latency: 0.08176878280937672 sec
Decode latency: 10.146047519519925 sec
Time for inference 5: 10.23 sec total, 50.05 tokens/sec
Decode latency: 10.15 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1818.44 GB/s
FLOPS achieved: 5.46 TF/s

Prefill latency: 0.08290752861648798 sec
Decode latency: 10.078215749934316 sec
Time for inference 6: 10.16 sec total, 50.38 tokens/sec
Decode latency: 10.08 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1830.38 GB/s
FLOPS achieved: 5.49 TF/s

Prefill latency: 0.08254894986748695 sec
Decode latency: 10.145616791211069 sec
Time for inference 7: 10.23 sec total, 50.05 tokens/sec
Decode latency: 10.15 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1818.39 GB/s
FLOPS achieved: 5.46 TF/s

Prefill latency: 0.08254952728748322 sec
Decode latency: 10.007028163410723 sec
Time for inference 8: 10.09 sec total, 50.74 tokens/sec
Decode latency: 10.01 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1843.36 GB/s
FLOPS achieved: 5.53 TF/s

Prefill latency: 0.08179628010839224 sec
Decode latency: 10.140675516799092 sec
Time for inference 9: 10.22 sec total, 50.08 tokens/sec
Decode latency: 10.14 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1819.39 GB/s
FLOPS achieved: 5.46 TF/s

Prefill latency: 0.0814871909096837 sec
[rank3]:[W1114 04:30:53.185940925 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1114 04:30:57.274616563 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 10.141388243995607 sec
Time for inference 10: 10.22 sec total, 50.08 tokens/sec
Decode latency: 10.14 sec
Prefill latency: 0.08 sec
Bandwidth achieved: 1819.33 GB/s
FLOPS achieved: 5.46 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 10.0312 sec
Average prefill latency: 0.0822 sec
Average tokens/sec: 50.63
Memory used: 39.14 GB
[rank0]:[W1114 04:30:58.530904785 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1114 04:31:01.518929089 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 04:31:03.072131239 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
