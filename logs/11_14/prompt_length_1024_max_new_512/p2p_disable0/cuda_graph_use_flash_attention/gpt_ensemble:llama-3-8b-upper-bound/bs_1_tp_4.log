W1114 03:01:09.438000 2426872 site-packages/torch/distributed/run.py:793] 
W1114 03:01:09.438000 2426872 site-packages/torch/distributed/run.py:793] *****************************************
W1114 03:01:09.438000 2426872 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 03:01:09.438000 2426872 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.13 seconds
CUDA_GRAPH are activate
Prefill latency: 0.013935836032032967 sec
Compilation time: 2.29 seconds
Compilation time: 2.39 seconds
Compilation time: 2.40 seconds
Decode latency: 2.376925801858306 sec
Compilation time: 2.39 seconds
Prefill latency: 0.013809049502015114 sec
Decode latency: 2.3655993696302176 sec
Prefill latency: 0.013793634250760078 sec
Decode latency: 2.3590404838323593 sec
Prefill latency: 0.013825424015522003 sec
Decode latency: 2.3823930770158768 sec
Prefill latency: 0.013816207647323608 sec
Decode latency: 2.381679356098175 sec
Prefill latency: 0.013804186135530472 sec
Decode latency: 2.380033476278186 sec
Time for inference 1: 2.39 sec total, 213.82 tokens/sec
Decode latency: 2.38 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 970.91 GB/s
FLOPS achieved: 2.91 TF/s

Prefill latency: 0.013799939304590225 sec
Decode latency: 2.2609946001321077 sec
Time for inference 2: 2.28 sec total, 225.01 tokens/sec
Decode latency: 2.26 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 1021.72 GB/s
FLOPS achieved: 3.07 TF/s

Prefill latency: 0.013828881084918976 sec
Decode latency: 2.315201936289668 sec
Time for inference 3: 2.33 sec total, 219.77 tokens/sec
Decode latency: 2.32 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 997.94 GB/s
FLOPS achieved: 2.99 TF/s

Prefill latency: 0.013796823099255562 sec
Decode latency: 2.2276418786495924 sec
Time for inference 4: 2.24 sec total, 228.36 tokens/sec
Decode latency: 2.23 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 1036.93 GB/s
FLOPS achieved: 3.11 TF/s

Prefill latency: 0.01382712833583355 sec
Decode latency: 2.3223349042236805 sec
Time for inference 5: 2.34 sec total, 219.10 tokens/sec
Decode latency: 2.32 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 994.90 GB/s
FLOPS achieved: 2.98 TF/s

Prefill latency: 0.01381848193705082 sec
Decode latency: 2.219272118061781 sec
Time for inference 6: 2.23 sec total, 229.21 tokens/sec
Decode latency: 2.22 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 1040.80 GB/s
FLOPS achieved: 3.12 TF/s

Prefill latency: 0.013822637498378754 sec
Decode latency: 2.3782235719263554 sec
Time for inference 7: 2.39 sec total, 213.98 tokens/sec
Decode latency: 2.38 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 971.65 GB/s
FLOPS achieved: 2.91 TF/s

Prefill latency: 0.013829376548528671 sec
Decode latency: 2.3586408011615276 sec
Time for inference 8: 2.37 sec total, 215.75 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 979.68 GB/s
FLOPS achieved: 2.94 TF/s

Prefill latency: 0.013829678297042847 sec
Decode latency: 2.378958012908697 sec
Time for inference 9: 2.39 sec total, 213.90 tokens/sec
Decode latency: 2.38 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 971.31 GB/s
FLOPS achieved: 2.91 TF/s

Prefill latency: 0.013836946338415146 sec
[rank1]:[W1114 03:01:53.127147271 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 2.2395063042640686 sec
Time for inference 10: 2.25 sec total, 227.15 tokens/sec
Decode latency: 2.24 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 1031.45 GB/s
FLOPS achieved: 3.09 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 2.3081 sec
Average prefill latency: 0.0138 sec
Average tokens/sec: 220.60
Memory used: 6.15 GB
[rank0]:[W1114 03:01:53.208992650 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1114 03:01:53.488627911 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1114 03:01:54.928924611 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 03:01:59.727858592 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
