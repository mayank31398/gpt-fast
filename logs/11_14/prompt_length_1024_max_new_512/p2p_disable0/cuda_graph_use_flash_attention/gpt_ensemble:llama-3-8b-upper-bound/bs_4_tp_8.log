W1114 03:06:25.445000 2448949 site-packages/torch/distributed/run.py:793] 
W1114 03:06:25.445000 2448949 site-packages/torch/distributed/run.py:793] *****************************************
W1114 03:06:25.445000 2448949 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 03:06:25.445000 2448949 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=768, bias=False)
        (wo): Linear(in_features=512, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=3584, bias=False)
        (w2): Linear(in_features=1792, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.55 seconds
CUDA_GRAPH are activate
Prefill latency: 0.027373507618904114 sec
Decode latency: 2.2864854615181684 sec
Compilation time: 2.32 seconds
Prefill latency: 0.027239354327321053 sec
Compilation time: 2.31 seconds
Compilation time: 2.32 seconds
Compilation time: 2.31 seconds
Compilation time: 2.31 seconds
Compilation time: 2.36 seconds
Compilation time: 2.36 seconds
Compilation time: 2.36 seconds
Decode latency: 2.2862788643687963 sec
Prefill latency: 0.027218414470553398 sec
Decode latency: 2.2702073249965906 sec
Prefill latency: 0.027303997427225113 sec
Decode latency: 2.2868669852614403 sec
Prefill latency: 0.027280831709504128 sec
Decode latency: 2.1054948940873146 sec
Prefill latency: 0.02724708430469036 sec
Decode latency: 2.285836860537529 sec
Time for inference 1: 2.31 sec total, 885.07 tokens/sec
Decode latency: 2.29 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2474.70 GB/s
FLOPS achieved: 7.42 TF/s

Prefill latency: 0.02730049565434456 sec
Decode latency: 2.1372945588082075 sec
Time for inference 2: 2.17 sec total, 945.81 tokens/sec
Decode latency: 2.14 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2644.52 GB/s
FLOPS achieved: 7.93 TF/s

Prefill latency: 0.027262575924396515 sec
Decode latency: 2.2860231399536133 sec
Time for inference 3: 2.31 sec total, 885.03 tokens/sec
Decode latency: 2.29 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2474.57 GB/s
FLOPS achieved: 7.42 TF/s

Prefill latency: 0.02723303623497486 sec
Decode latency: 2.2171406410634518 sec
Time for inference 4: 2.25 sec total, 912.14 tokens/sec
Decode latency: 2.22 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2550.36 GB/s
FLOPS achieved: 7.65 TF/s

Prefill latency: 0.02722836099565029 sec
Decode latency: 2.22123895958066 sec
Time for inference 5: 2.25 sec total, 910.53 tokens/sec
Decode latency: 2.22 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2545.88 GB/s
FLOPS achieved: 7.64 TF/s

Prefill latency: 0.02723524533212185 sec
Decode latency: 2.285496925935149 sec
Time for inference 6: 2.31 sec total, 885.21 tokens/sec
Decode latency: 2.29 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2475.09 GB/s
FLOPS achieved: 7.43 TF/s

Prefill latency: 0.02727382443845272 sec
Decode latency: 2.284155709668994 sec
Time for inference 7: 2.31 sec total, 885.68 tokens/sec
Decode latency: 2.28 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2476.39 GB/s
FLOPS achieved: 7.43 TF/s

Prefill latency: 0.02722708135843277 sec
Decode latency: 2.2842939849942923 sec
Time for inference 8: 2.31 sec total, 885.68 tokens/sec
Decode latency: 2.28 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2476.40 GB/s
FLOPS achieved: 7.43 TF/s

Prefill latency: 0.02721141278743744 sec
Decode latency: 2.2871426045894623 sec
Time for inference 9: 2.32 sec total, 884.63 tokens/sec
Decode latency: 2.29 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2473.47 GB/s
FLOPS achieved: 7.42 TF/s

Prefill latency: 0.027251040562987328 sec
Decode latency: 2.2848905604332685 sec
Time for inference 10: 2.31 sec total, 885.48 tokens/sec
Decode latency: 2.28 sec
Prefill latency: 0.03 sec
Bandwidth achieved: 2475.82 GB/s
FLOPS achieved: 7.43 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 2.2574 sec
Average prefill latency: 0.0272 sec
Average tokens/sec: 896.53
Memory used: 5.35 GB
[rank0]:[W1114 03:07:10.330856536 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank4]:[W1114 03:07:11.287690385 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 4]  using GPU 4 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1114 03:07:11.409762372 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1114 03:07:11.557604992 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1114 03:07:11.673765884 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank7]:[W1114 03:07:12.126985239 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 7]  using GPU 7 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank5]:[W1114 03:07:12.146601891 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 5]  using GPU 5 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank6]:[W1114 03:07:12.307699344 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 6]  using GPU 6 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 03:07:24.694654147 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
