W1114 03:04:22.572000 2440739 site-packages/torch/distributed/run.py:793] 
W1114 03:04:22.572000 2440739 site-packages/torch/distributed/run.py:793] *****************************************
W1114 03:04:22.572000 2440739 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 03:04:22.572000 2440739 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.04 seconds
CUDA_GRAPH are activate
Prefill latency: 0.06934979371726513 sec
Compilation time: 3.39 seconds
Decode latency: 3.362448452040553 sec
Compilation time: 3.43 seconds
Prefill latency: 0.06909596361219883 sec
Decode latency: 3.364045776426792 sec
Prefill latency: 0.06980667635798454 sec
Decode latency: 3.363452011719346 sec
Prefill latency: 0.06984754279255867 sec
Decode latency: 3.3627182859927416 sec
Prefill latency: 0.06977766938507557 sec
Decode latency: 3.3637358006089926 sec
Prefill latency: 0.06982409581542015 sec
Decode latency: 3.364611016586423 sec
Time for inference 1: 3.44 sec total, 596.18 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4787.61 GB/s
FLOPS achieved: 14.36 TF/s

Prefill latency: 0.06977943144738674 sec
Decode latency: 3.363842211663723 sec
Time for inference 2: 3.43 sec total, 596.33 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4788.82 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06985156424343586 sec
Decode latency: 3.3642161581665277 sec
Time for inference 3: 3.43 sec total, 596.23 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4788.05 GB/s
FLOPS achieved: 14.36 TF/s

Prefill latency: 0.07024049013853073 sec
Decode latency: 3.36417718231678 sec
Time for inference 4: 3.44 sec total, 596.16 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4787.49 GB/s
FLOPS achieved: 14.36 TF/s

Prefill latency: 0.06981364265084267 sec
Decode latency: 3.362830827012658 sec
Time for inference 5: 3.43 sec total, 596.50 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4790.19 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06973494589328766 sec
Decode latency: 3.3627746030688286 sec
Time for inference 6: 3.43 sec total, 596.52 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4790.41 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.07009681686758995 sec
Decode latency: 3.363579584285617 sec
Time for inference 7: 3.43 sec total, 596.33 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4788.82 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06990574672818184 sec
Decode latency: 3.3626395612955093 sec
Time for inference 8: 3.43 sec total, 596.52 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4790.36 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06975186616182327 sec
Decode latency: 3.3631136398762465 sec
Time for inference 9: 3.43 sec total, 596.47 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4789.99 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.0698948074132204 sec
[rank1]:[W1114 03:05:21.259357763 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 3.36335164681077 sec
Time for inference 10: 3.43 sec total, 596.40 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4789.39 GB/s
FLOPS achieved: 14.37 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 3.3635 sec
Average prefill latency: 0.0699 sec
Average tokens/sec: 596.36
Memory used: 11.17 GB
[rank0]:[W1114 03:05:22.142091531 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 03:05:24.745332954 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
