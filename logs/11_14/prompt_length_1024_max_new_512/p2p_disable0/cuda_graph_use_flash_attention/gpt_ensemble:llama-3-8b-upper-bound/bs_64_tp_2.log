W1114 03:15:05.822000 2479423 site-packages/torch/distributed/run.py:793] 
W1114 03:15:05.822000 2479423 site-packages/torch/distributed/run.py:793] *****************************************
W1114 03:15:05.822000 2479423 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 03:15:05.822000 2479423 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.37 seconds
CUDA_GRAPH are activate
Prefill latency: 1.213577400892973 sec
Decode latency: 4.589773831889033 sec
Compilation time: 5.80 seconds
Compilation time: 5.73 seconds
Prefill latency: 1.21085986495018 sec
Decode latency: 4.588302545249462 sec
Prefill latency: 1.211506811901927 sec
Decode latency: 4.588529836386442 sec
Prefill latency: 1.2066677287220955 sec
Decode latency: 4.5890378169715405 sec
Prefill latency: 1.210826762020588 sec
Decode latency: 4.5878085773438215 sec
Prefill latency: 1.212243527173996 sec
Decode latency: 4.5886328518390656 sec
Time for inference 1: 5.80 sec total, 5647.86 tokens/sec
Decode latency: 4.59 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45355.32 GB/s
FLOPS achieved: 136.07 TF/s

Prefill latency: 1.209737490862608 sec
Decode latency: 4.5832502115517855 sec
Time for inference 2: 5.79 sec total, 5655.60 tokens/sec
Decode latency: 4.58 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45417.46 GB/s
FLOPS achieved: 136.25 TF/s

Prefill latency: 1.2144820932298899 sec
Decode latency: 4.565894868224859 sec
Time for inference 3: 5.78 sec total, 5667.94 tokens/sec
Decode latency: 4.57 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45516.52 GB/s
FLOPS achieved: 136.55 TF/s

Prefill latency: 1.2139838859438896 sec
Decode latency: 4.587932368740439 sec
Time for inference 4: 5.80 sec total, 5646.96 tokens/sec
Decode latency: 4.59 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45348.10 GB/s
FLOPS achieved: 136.04 TF/s

Prefill latency: 1.211870439350605 sec
Decode latency: 4.542809449136257 sec
Time for inference 5: 5.76 sec total, 5693.25 tokens/sec
Decode latency: 4.54 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45719.84 GB/s
FLOPS achieved: 137.16 TF/s

Prefill latency: 1.2062785159796476 sec
Decode latency: 4.589686155319214 sec
Time for inference 6: 5.80 sec total, 5652.74 tokens/sec
Decode latency: 4.59 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45394.51 GB/s
FLOPS achieved: 136.18 TF/s

Prefill latency: 1.209933677688241 sec
Decode latency: 4.58201945386827 sec
Time for inference 7: 5.79 sec total, 5656.46 tokens/sec
Decode latency: 4.58 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45424.34 GB/s
FLOPS achieved: 136.27 TF/s

Prefill latency: 1.211231915280223 sec
Decode latency: 4.588891172781587 sec
Time for inference 8: 5.80 sec total, 5648.57 tokens/sec
Decode latency: 4.59 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45360.98 GB/s
FLOPS achieved: 136.08 TF/s

Prefill latency: 1.2091357316821814 sec
Decode latency: 4.588761370629072 sec
Time for inference 9: 5.80 sec total, 5650.88 tokens/sec
Decode latency: 4.59 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45379.57 GB/s
FLOPS achieved: 136.14 TF/s

Prefill latency: 1.2090980019420385 sec
[rank1]:[W1114 03:16:43.984294274 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 4.589166432619095 sec
Time for inference 10: 5.80 sec total, 5650.45 tokens/sec
Decode latency: 4.59 sec
Prefill latency: 1.21 sec
Bandwidth achieved: 45376.10 GB/s
FLOPS achieved: 136.13 TF/s

==========
Batch Size: 64
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 4.5807 sec
Average prefill latency: 1.2108 sec
Average tokens/sec: 5657.07
Memory used: 39.95 GB
[rank0]:[W1114 03:16:44.845162310 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 03:16:45.567889292 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
