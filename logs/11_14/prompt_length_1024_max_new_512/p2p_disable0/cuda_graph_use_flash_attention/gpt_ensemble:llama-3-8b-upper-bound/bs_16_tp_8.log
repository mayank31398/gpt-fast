W1114 03:11:23.993000 2467896 site-packages/torch/distributed/run.py:793] 
W1114 03:11:23.993000 2467896 site-packages/torch/distributed/run.py:793] *****************************************
W1114 03:11:23.993000 2467896 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 03:11:23.993000 2467896 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=768, bias=False)
        (wo): Linear(in_features=512, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=3584, bias=False)
        (w2): Linear(in_features=1792, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 2.11 seconds
CUDA_GRAPH are activate
Prefill latency: 0.09871334210038185 sec
Compilation time: 2.42 seconds
Compilation time: 2.49 seconds
Compilation time: 2.55 seconds
Compilation time: 2.59 seconds
Decode latency: 2.3933884724974632 sec
Compilation time: 2.49 seconds
Prefill latency: 0.09891615249216557 sec
Compilation time: 2.34 seconds
Compilation time: 2.37 seconds
Compilation time: 2.59 seconds
Decode latency: 2.448574859648943 sec
Prefill latency: 0.09938555583357811 sec
Decode latency: 2.308701988309622 sec
Prefill latency: 0.09951967559754848 sec
Decode latency: 2.3688786420971155 sec
Prefill latency: 0.09852342121303082 sec
Decode latency: 2.4492099415510893 sec
Prefill latency: 0.09863077849149704 sec
Decode latency: 2.4010950922966003 sec
Time for inference 1: 2.50 sec total, 3276.16 tokens/sec
Decode latency: 2.40 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9160.25 GB/s
FLOPS achieved: 27.48 TF/s

Prefill latency: 0.0987516175955534 sec
Decode latency: 2.3006377294659615 sec
Time for inference 2: 2.40 sec total, 3413.21 tokens/sec
Decode latency: 2.30 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9543.45 GB/s
FLOPS achieved: 28.63 TF/s

Prefill latency: 0.09896908700466156 sec
Decode latency: 2.4075682815164328 sec
Time for inference 3: 2.51 sec total, 3267.18 tokens/sec
Decode latency: 2.41 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9135.16 GB/s
FLOPS achieved: 27.41 TF/s

Prefill latency: 0.09962708316743374 sec
Decode latency: 2.3129409458488226 sec
Time for inference 4: 2.41 sec total, 3394.51 tokens/sec
Decode latency: 2.31 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9491.17 GB/s
FLOPS achieved: 28.47 TF/s

Prefill latency: 0.09925319813191891 sec
Decode latency: 2.4241989739239216 sec
Time for inference 5: 2.52 sec total, 3245.40 tokens/sec
Decode latency: 2.42 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9074.25 GB/s
FLOPS achieved: 27.22 TF/s

Prefill latency: 0.09918035194277763 sec
Decode latency: 2.4470278955996037 sec
Time for inference 6: 2.55 sec total, 3216.40 tokens/sec
Decode latency: 2.45 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 8993.16 GB/s
FLOPS achieved: 26.98 TF/s

Prefill latency: 0.09909290261566639 sec
Decode latency: 2.446303192526102 sec
Time for inference 7: 2.55 sec total, 3217.47 tokens/sec
Decode latency: 2.45 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 8996.16 GB/s
FLOPS achieved: 26.99 TF/s

Prefill latency: 0.09933002851903439 sec
Decode latency: 2.3224534671753645 sec
Time for inference 8: 2.42 sec total, 3381.68 tokens/sec
Decode latency: 2.32 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9455.30 GB/s
FLOPS achieved: 28.37 TF/s

Prefill latency: 0.09879111312329769 sec
Decode latency: 2.4296655915677547 sec
Time for inference 9: 2.53 sec total, 3238.92 tokens/sec
Decode latency: 2.43 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9056.14 GB/s
FLOPS achieved: 27.17 TF/s

Prefill latency: 0.09942325949668884 sec
[rank4]:[W1114 03:12:12.268887468 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 4]  using GPU 4 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1114 03:12:13.850971728 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank6]:[W1114 03:12:13.934178798 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 6]  using GPU 6 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 2.4488033186644316 sec
Time for inference 10: 2.55 sec total, 3213.86 tokens/sec
Decode latency: 2.45 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 8986.08 GB/s
FLOPS achieved: 26.96 TF/s

==========
Batch Size: 16
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 2.3941 sec
Average prefill latency: 0.0991 sec
Average tokens/sec: 3286.48
Memory used: 9.58 GB
[rank0]:[W1114 03:12:13.198609576 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank5]:[W1114 03:12:13.392672352 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 5]  using GPU 5 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1114 03:12:13.532206281 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1114 03:12:14.825683728 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank7]:[W1114 03:12:14.261483660 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 7]  using GPU 7 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 03:12:25.153988762 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
