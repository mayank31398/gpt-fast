W1114 08:43:22.091000 2400057 site-packages/torch/distributed/run.py:793] 
W1114 08:43:22.091000 2400057 site-packages/torch/distributed/run.py:793] *****************************************
W1114 08:43:22.091000 2400057 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 08:43:22.091000 2400057 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=1280, bias=False)
        (wo): Linear(in_features=1024, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.79 seconds
CUDA_GRAPH are activate
Prefill latency: 0.638565069064498 sec
Compilation time: 8.28 seconds
Compilation time: 8.59 seconds
Compilation time: 8.14 seconds
Compilation time: 8.60 seconds
Compilation time: 8.59 seconds
Decode latency: 7.956417468376458 sec
Compilation time: 8.60 seconds
Compilation time: 8.60 seconds
Compilation time: 8.59 seconds
Prefill latency: 0.6368218502029777 sec
Decode latency: 7.660898366943002 sec
Prefill latency: 0.6385611603036523 sec
Decode latency: 7.95743899885565 sec
Prefill latency: 0.6383033907040954 sec
Decode latency: 7.954189202748239 sec
Prefill latency: 0.6394978435710073 sec
Decode latency: 7.5925221256911755 sec
Prefill latency: 0.6316383294761181 sec
Decode latency: 7.956261990591884 sec
Time for inference 1: 8.59 sec total, 953.77 tokens/sec
Decode latency: 7.96 sec
Prefill latency: 0.63 sec
Bandwidth achieved: 18328.37 GB/s
FLOPS achieved: 54.99 TF/s

Prefill latency: 0.6388196125626564 sec
Decode latency: 7.552470277994871 sec
Time for inference 2: 8.19 sec total, 999.95 tokens/sec
Decode latency: 7.55 sec
Prefill latency: 0.64 sec
Bandwidth achieved: 19215.82 GB/s
FLOPS achieved: 57.65 TF/s

Prefill latency: 0.636975304223597 sec
Decode latency: 7.956300693564117 sec
Time for inference 3: 8.59 sec total, 953.19 tokens/sec
Decode latency: 7.96 sec
Prefill latency: 0.64 sec
Bandwidth achieved: 18317.16 GB/s
FLOPS achieved: 54.95 TF/s

Prefill latency: 0.6388292480260134 sec
Decode latency: 7.955865084193647 sec
Time for inference 4: 8.60 sec total, 953.03 tokens/sec
Decode latency: 7.96 sec
Prefill latency: 0.64 sec
Bandwidth achieved: 18314.16 GB/s
FLOPS achieved: 54.94 TF/s

Prefill latency: 0.6352057084441185 sec
Decode latency: 7.954191034659743 sec
Time for inference 5: 8.59 sec total, 953.63 tokens/sec
Decode latency: 7.95 sec
Prefill latency: 0.64 sec
Bandwidth achieved: 18325.59 GB/s
FLOPS achieved: 54.98 TF/s

Prefill latency: 0.6416092906147242 sec
Decode latency: 7.955160357058048 sec
Time for inference 6: 8.60 sec total, 952.79 tokens/sec
Decode latency: 7.96 sec
Prefill latency: 0.64 sec
Bandwidth achieved: 18309.44 GB/s
FLOPS achieved: 54.93 TF/s

Prefill latency: 0.6395224910229445 sec
Decode latency: 7.954812086187303 sec
Time for inference 7: 8.60 sec total, 953.06 tokens/sec
Decode latency: 7.95 sec
Prefill latency: 0.64 sec
Bandwidth achieved: 18314.76 GB/s
FLOPS achieved: 54.94 TF/s

Prefill latency: 0.6387098887935281 sec
Decode latency: 7.832564908079803 sec
Time for inference 8: 8.47 sec total, 966.90 tokens/sec
Decode latency: 7.83 sec
Prefill latency: 0.64 sec
Bandwidth achieved: 18580.73 GB/s
FLOPS achieved: 55.74 TF/s

Prefill latency: 0.6367874471470714 sec
Decode latency: 7.953861663118005 sec
Time for inference 9: 8.59 sec total, 953.47 tokens/sec
Decode latency: 7.95 sec
Prefill latency: 0.64 sec
Bandwidth achieved: 18322.57 GB/s
FLOPS achieved: 54.97 TF/s

Prefill latency: 0.6372059220448136 sec
Decode latency: 7.954941160976887 sec
Time for inference 10: 8.59 sec total, 953.31 tokens/sec
Decode latency: 7.95 sec
Prefill latency: 0.64 sec
Bandwidth achieved: 18319.49 GB/s
FLOPS achieved: 54.96 TF/s

==========
Batch Size: 16
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 7.9026 sec
Average prefill latency: 0.6375 sec
Average tokens/sec: 959.31
Memory used: 28.66 GB
[rank0]:[W1114 08:45:40.770714470 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank6]:[W1114 08:45:40.879829031 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 6]  using GPU 6 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank4]:[W1114 08:45:40.122466430 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 4]  using GPU 4 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1114 08:45:40.426371872 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1114 08:45:41.832668983 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank5]:[W1114 08:45:41.840018989 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 5]  using GPU 5 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank7]:[W1114 08:45:41.955569717 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 7]  using GPU 7 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1114 08:45:41.339015785 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 08:45:47.464877665 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
