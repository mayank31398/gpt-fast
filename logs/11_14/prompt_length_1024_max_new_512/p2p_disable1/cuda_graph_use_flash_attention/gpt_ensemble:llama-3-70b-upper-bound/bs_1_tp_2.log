W1114 06:35:38.113000 2370407 site-packages/torch/distributed/run.py:793] 
W1114 06:35:38.113000 2370407 site-packages/torch/distributed/run.py:793] *****************************************
W1114 06:35:38.113000 2370407 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 06:35:38.113000 2370407 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 8192)
  (layers): ModuleList(
    (0-79): 80 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=8192, out_features=5120, bias=False)
        (wo): Linear(in_features=4096, out_features=8192, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=8192, out_features=28672, bias=False)
        (w2): Linear(in_features=14336, out_features=8192, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 1.28 seconds
CUDA_GRAPH are activate
Prefill latency: 0.14752995409071445 sec
Decode latency: 15.846983101218939 sec
Compilation time: 16.00 seconds
Prefill latency: 0.1467361692339182 sec
Compilation time: 16.05 seconds
Decode latency: 15.847398293204606 sec
Prefill latency: 0.14734393171966076 sec
Decode latency: 15.847098694182932 sec
Prefill latency: 0.14792929403483868 sec
Decode latency: 15.847421269863844 sec
Prefill latency: 0.14900796301662922 sec
Decode latency: 15.846214076504111 sec
Prefill latency: 0.14941079821437597 sec
Decode latency: 15.839497805573046 sec
Time for inference 1: 15.99 sec total, 32.02 tokens/sec
Decode latency: 15.84 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2259.15 GB/s
FLOPS achieved: 6.78 TF/s

Prefill latency: 0.14729422237724066 sec
Decode latency: 15.84743514470756 sec
Time for inference 2: 16.00 sec total, 32.01 tokens/sec
Decode latency: 15.85 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2258.34 GB/s
FLOPS achieved: 6.78 TF/s

Prefill latency: 0.14911365509033203 sec
Decode latency: 15.847745899111032 sec
Time for inference 3: 16.00 sec total, 32.00 tokens/sec
Decode latency: 15.85 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2258.04 GB/s
FLOPS achieved: 6.77 TF/s

Prefill latency: 0.14981028158217669 sec
Decode latency: 15.847455856390297 sec
Time for inference 4: 16.00 sec total, 32.00 tokens/sec
Decode latency: 15.85 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2257.99 GB/s
FLOPS achieved: 6.77 TF/s

Prefill latency: 0.1487215105444193 sec
Decode latency: 15.847889957018197 sec
Time for inference 5: 16.00 sec total, 32.00 tokens/sec
Decode latency: 15.85 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2258.08 GB/s
FLOPS achieved: 6.77 TF/s

Prefill latency: 0.1484055295586586 sec
Decode latency: 15.372451315633953 sec
Time for inference 6: 15.52 sec total, 32.99 tokens/sec
Decode latency: 15.37 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2327.29 GB/s
FLOPS achieved: 6.98 TF/s

Prefill latency: 0.14866667985916138 sec
Decode latency: 15.848016754724085 sec
Time for inference 7: 16.00 sec total, 32.00 tokens/sec
Decode latency: 15.85 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2258.08 GB/s
FLOPS achieved: 6.77 TF/s

Prefill latency: 0.1479503447189927 sec
Decode latency: 15.847733326256275 sec
Time for inference 8: 16.00 sec total, 32.01 tokens/sec
Decode latency: 15.85 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2258.20 GB/s
FLOPS achieved: 6.77 TF/s

Prefill latency: 0.1476908652111888 sec
Decode latency: 15.847629184834659 sec
Time for inference 9: 16.00 sec total, 32.01 tokens/sec
Decode latency: 15.85 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2258.25 GB/s
FLOPS achieved: 6.77 TF/s

Prefill latency: 0.14852134976536036 sec
Decode latency: 15.847712583839893 sec
Time for inference 10: 16.00 sec total, 32.01 tokens/sec
Decode latency: 15.85 sec
Prefill latency: 0.15 sec
Bandwidth achieved: 2258.13 GB/s
FLOPS achieved: 6.77 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 15.7994 sec
Average prefill latency: 0.1486 sec
Average tokens/sec: 32.10
Memory used: 73.55 GB
[rank0]:[W1114 06:39:44.105659359 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1114 06:39:45.906076225 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 06:39:46.908518966 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
