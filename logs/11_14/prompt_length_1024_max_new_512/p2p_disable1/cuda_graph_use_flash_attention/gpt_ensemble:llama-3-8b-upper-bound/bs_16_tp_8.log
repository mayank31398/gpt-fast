W1114 08:15:48.941000 2776737 site-packages/torch/distributed/run.py:793] 
W1114 08:15:48.941000 2776737 site-packages/torch/distributed/run.py:793] *****************************************
W1114 08:15:48.941000 2776737 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 08:15:48.941000 2776737 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=768, bias=False)
        (wo): Linear(in_features=512, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=3584, bias=False)
        (w2): Linear(in_features=1792, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.22 seconds
CUDA_GRAPH are activate
Prefill latency: 0.09841000474989414 sec
Decode latency: 2.449051169678569 sec
Compilation time: 2.55 seconds
Prefill latency: 0.09828460775315762 sec
Compilation time: 2.40 seconds
Compilation time: 2.40 seconds
Compilation time: 2.44 seconds
Compilation time: 2.49 seconds
Compilation time: 2.53 seconds
Compilation time: 2.54 seconds
Compilation time: 2.59 seconds
Decode latency: 2.4469858333468437 sec
Prefill latency: 0.09858397953212261 sec
Decode latency: 2.2885154522955418 sec
Prefill latency: 0.09902698174118996 sec
Decode latency: 2.4468326214700937 sec
Prefill latency: 0.0991216879338026 sec
Decode latency: 2.450925398617983 sec
Prefill latency: 0.09965731017291546 sec
Decode latency: 2.437048874795437 sec
Time for inference 1: 2.54 sec total, 3228.31 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9026.48 GB/s
FLOPS achieved: 27.08 TF/s

Prefill latency: 0.09984057024121284 sec
Decode latency: 2.3086129520088434 sec
Time for inference 2: 2.41 sec total, 3400.20 tokens/sec
Decode latency: 2.31 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9507.08 GB/s
FLOPS achieved: 28.52 TF/s

Prefill latency: 0.098720733076334 sec
Decode latency: 2.4461587090045214 sec
Time for inference 3: 2.55 sec total, 3217.89 tokens/sec
Decode latency: 2.45 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 8997.33 GB/s
FLOPS achieved: 26.99 TF/s

Prefill latency: 0.09883872605860233 sec
Decode latency: 2.412901733070612 sec
Time for inference 4: 2.51 sec total, 3260.33 tokens/sec
Decode latency: 2.41 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9115.99 GB/s
FLOPS achieved: 27.35 TF/s

Prefill latency: 0.09929901547729969 sec
Decode latency: 2.444000529125333 sec
Time for inference 5: 2.54 sec total, 3219.92 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9003.01 GB/s
FLOPS achieved: 27.01 TF/s

Prefill latency: 0.09931567870080471 sec
Decode latency: 2.259966043755412 sec
Time for inference 6: 2.36 sec total, 3470.74 tokens/sec
Decode latency: 2.26 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9704.33 GB/s
FLOPS achieved: 29.11 TF/s

Prefill latency: 0.09915248677134514 sec
Decode latency: 2.4424594044685364 sec
Time for inference 7: 2.54 sec total, 3222.11 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9009.13 GB/s
FLOPS achieved: 27.03 TF/s

Prefill latency: 0.09887084551155567 sec
Decode latency: 2.3510321341454983 sec
Time for inference 8: 2.45 sec total, 3342.65 tokens/sec
Decode latency: 2.35 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9346.17 GB/s
FLOPS achieved: 28.04 TF/s

Prefill latency: 0.09973464347422123 sec
Decode latency: 2.435517305508256 sec
Time for inference 9: 2.54 sec total, 3230.21 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9031.78 GB/s
FLOPS achieved: 27.10 TF/s

Prefill latency: 0.09944147989153862 sec
Decode latency: 2.364078199490905 sec
Time for inference 10: 2.46 sec total, 3324.37 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9295.05 GB/s
FLOPS achieved: 27.89 TF/s

==========
Batch Size: 16
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 2.3902 sec
Average prefill latency: 0.0993 sec
Average tokens/sec: 3291.67
Memory used: 9.58 GB
[rank0]:[W1114 08:16:36.525767303 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1114 08:16:38.245742178 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank4]:[W1114 08:16:38.342154535 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 4]  using GPU 4 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank6]:[W1114 08:16:38.518636742 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 6]  using GPU 6 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1114 08:16:39.041312728 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1114 08:16:39.315245653 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank7]:[W1114 08:16:39.477835028 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 7]  using GPU 7 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank5]:[W1114 08:16:40.746792261 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 5]  using GPU 5 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 08:16:48.951366284 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
