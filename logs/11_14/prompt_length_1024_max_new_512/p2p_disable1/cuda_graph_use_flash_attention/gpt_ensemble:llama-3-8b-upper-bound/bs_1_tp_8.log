W1114 08:06:41.140000 2770943 site-packages/torch/distributed/run.py:793] 
W1114 08:06:41.140000 2770943 site-packages/torch/distributed/run.py:793] *****************************************
W1114 08:06:41.140000 2770943 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 08:06:41.140000 2770943 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=768, bias=False)
        (wo): Linear(in_features=512, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=3584, bias=False)
        (w2): Linear(in_features=1792, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.54 seconds
CUDA_GRAPH are activate
Prefill latency: 0.010198825970292091 sec
Compilation time: 1.95 seconds
Decode latency: 2.0456314105540514 sec
Compilation time: 2.06 seconds
Prefill latency: 0.010203834623098373 sec
Compilation time: 1.89 seconds
Compilation time: 1.91 seconds
Compilation time: 1.93 seconds
Compilation time: 2.06 seconds
Compilation time: 2.10 seconds
Compilation time: 2.06 seconds
Decode latency: 2.045328948646784 sec
Prefill latency: 0.010178564116358757 sec
Decode latency: 2.045997451990843 sec
Prefill latency: 0.010188359767198563 sec
Decode latency: 2.046083876863122 sec
Prefill latency: 0.01017521508038044 sec
Decode latency: 1.9686447214335203 sec
Prefill latency: 0.010178396478295326 sec
Decode latency: 2.0457220375537872 sec
Time for inference 1: 2.06 sec total, 248.95 tokens/sec
Decode latency: 2.05 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 696.08 GB/s
FLOPS achieved: 2.09 TF/s

Prefill latency: 0.010190384462475777 sec
Decode latency: 2.045656757429242 sec
Time for inference 2: 2.06 sec total, 248.96 tokens/sec
Decode latency: 2.05 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 696.11 GB/s
FLOPS achieved: 2.09 TF/s

Prefill latency: 0.010175907984375954 sec
Decode latency: 2.0456935316324234 sec
Time for inference 3: 2.06 sec total, 248.96 tokens/sec
Decode latency: 2.05 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 696.10 GB/s
FLOPS achieved: 2.09 TF/s

Prefill latency: 0.010192090645432472 sec
Decode latency: 1.889927500858903 sec
Time for inference 4: 1.90 sec total, 269.36 tokens/sec
Decode latency: 1.89 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 753.15 GB/s
FLOPS achieved: 2.26 TF/s

Prefill latency: 0.0101808812469244 sec
Decode latency: 2.046023614704609 sec
Time for inference 5: 2.06 sec total, 248.92 tokens/sec
Decode latency: 2.05 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 695.99 GB/s
FLOPS achieved: 2.09 TF/s

Prefill latency: 0.01020001620054245 sec
Decode latency: 2.0457640811800957 sec
Time for inference 6: 2.06 sec total, 248.94 tokens/sec
Decode latency: 2.05 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 696.06 GB/s
FLOPS achieved: 2.09 TF/s

Prefill latency: 0.010191570967435837 sec
Decode latency: 2.045751368626952 sec
Time for inference 7: 2.06 sec total, 248.95 tokens/sec
Decode latency: 2.05 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 696.08 GB/s
FLOPS achieved: 2.09 TF/s

Prefill latency: 0.010174483060836792 sec
Decode latency: 2.0459337141364813 sec
Time for inference 8: 2.06 sec total, 248.94 tokens/sec
Decode latency: 2.05 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 696.04 GB/s
FLOPS achieved: 2.09 TF/s

Prefill latency: 0.010200845077633858 sec
Decode latency: 2.0185062400996685 sec
Time for inference 9: 2.03 sec total, 252.30 tokens/sec
Decode latency: 2.02 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 705.44 GB/s
FLOPS achieved: 2.12 TF/s

Prefill latency: 0.010188128799200058 sec
[rank2]:[W1114 08:07:20.561620561 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank5]:[W1114 08:07:21.692826280 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 5]  using GPU 5 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank7]:[W1114 08:07:21.700691487 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 7]  using GPU 7 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank4]:[W1114 08:07:21.835836923 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 4]  using GPU 4 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1114 08:07:21.951813382 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 1.9249183908104897 sec
Time for inference 10: 1.94 sec total, 264.49 tokens/sec
Decode latency: 1.92 sec
Prefill latency: 0.01 sec
Bandwidth achieved: 739.54 GB/s
FLOPS achieved: 2.22 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 2.0154 sec
Average prefill latency: 0.0102 sec
Average tokens/sec: 252.88
Memory used: 4.33 GB
[rank0]:[W1114 08:07:21.056764178 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank1]:[W1114 08:07:21.197716730 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank6]:[W1114 08:07:22.013456930 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 6]  using GPU 6 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 08:07:31.721010541 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
