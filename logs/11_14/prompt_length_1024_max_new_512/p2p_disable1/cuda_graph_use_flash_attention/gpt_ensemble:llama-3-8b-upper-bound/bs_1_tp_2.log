W1114 08:04:52.199000 2769655 site-packages/torch/distributed/run.py:793] 
W1114 08:04:52.199000 2769655 site-packages/torch/distributed/run.py:793] *****************************************
W1114 08:04:52.199000 2769655 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 08:04:52.199000 2769655 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.38 seconds
CUDA_GRAPH are activate
Prefill latency: 0.019507769495248795 sec
Compilation time: 2.95 seconds
Decode latency: 3.189757516607642 sec
Compilation time: 3.21 seconds
Prefill latency: 0.01936127059161663 sec
Decode latency: 3.1927415896207094 sec
Prefill latency: 0.01937212608754635 sec
Decode latency: 3.193116657435894 sec
Prefill latency: 0.019370172172784805 sec
Decode latency: 3.192831229418516 sec
Prefill latency: 0.019370626658201218 sec
Decode latency: 3.192931631579995 sec
Prefill latency: 0.019370421767234802 sec
Decode latency: 3.175416648387909 sec
Time for inference 1: 3.20 sec total, 160.23 tokens/sec
Decode latency: 3.18 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1286.70 GB/s
FLOPS achieved: 3.86 TF/s

Prefill latency: 0.01936665177345276 sec
Decode latency: 3.19111642614007 sec
Time for inference 2: 3.21 sec total, 159.44 tokens/sec
Decode latency: 3.19 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1280.40 GB/s
FLOPS achieved: 3.84 TF/s

Prefill latency: 0.01933911256492138 sec
Decode latency: 3.13203857652843 sec
Time for inference 3: 3.15 sec total, 162.43 tokens/sec
Decode latency: 3.13 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1304.37 GB/s
FLOPS achieved: 3.91 TF/s

Prefill latency: 0.019337156787514687 sec
Decode latency: 3.190349869430065 sec
Time for inference 4: 3.21 sec total, 159.48 tokens/sec
Decode latency: 3.19 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1280.67 GB/s
FLOPS achieved: 3.84 TF/s

Prefill latency: 0.019310254603624344 sec
Decode latency: 3.18925903737545 sec
Time for inference 5: 3.21 sec total, 159.53 tokens/sec
Decode latency: 3.19 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1281.08 GB/s
FLOPS achieved: 3.84 TF/s

Prefill latency: 0.019319240003824234 sec
Decode latency: 3.1915044095367193 sec
Time for inference 6: 3.21 sec total, 159.42 tokens/sec
Decode latency: 3.19 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1280.22 GB/s
FLOPS achieved: 3.84 TF/s

Prefill latency: 0.0193167831748724 sec
Decode latency: 3.192422052845359 sec
Time for inference 7: 3.21 sec total, 159.38 tokens/sec
Decode latency: 3.19 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1279.88 GB/s
FLOPS achieved: 3.84 TF/s

Prefill latency: 0.019327644258737564 sec
Decode latency: 3.1908223759382963 sec
Time for inference 8: 3.21 sec total, 159.46 tokens/sec
Decode latency: 3.19 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1280.53 GB/s
FLOPS achieved: 3.84 TF/s

Prefill latency: 0.019320974126458168 sec
Decode latency: 3.2143977489322424 sec
Time for inference 9: 3.23 sec total, 158.29 tokens/sec
Decode latency: 3.21 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1271.17 GB/s
FLOPS achieved: 3.81 TF/s

Prefill latency: 0.01931384950876236 sec
[rank1]:[W1114 08:05:45.685245921 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 3.026038834825158 sec
Time for inference 10: 3.05 sec total, 168.08 tokens/sec
Decode latency: 3.03 sec
Prefill latency: 0.02 sec
Bandwidth achieved: 1349.80 GB/s
FLOPS achieved: 4.05 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 3.1693 sec
Average prefill latency: 0.0193 sec
Average tokens/sec: 160.57
Memory used: 9.69 GB
[rank0]:[W1114 08:05:47.040709122 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 08:05:48.264950405 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
