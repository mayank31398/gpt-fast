W1114 08:08:57.932000 2772571 site-packages/torch/distributed/run.py:793] 
W1114 08:08:57.932000 2772571 site-packages/torch/distributed/run.py:793] *****************************************
W1114 08:08:57.932000 2772571 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1114 08:08:57.932000 2772571 site-packages/torch/distributed/run.py:793] *****************************************
flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.16 seconds
CUDA_GRAPH are activate
Prefill latency: 0.070152273401618 sec
Compilation time: 3.38 seconds
Decode latency: 3.3630997966974974 sec
Compilation time: 3.43 seconds
Prefill latency: 0.0698787234723568 sec
Decode latency: 3.3629663959145546 sec
Prefill latency: 0.06935947760939598 sec
Decode latency: 3.3616134356707335 sec
Prefill latency: 0.07008801400661469 sec
Decode latency: 3.3628283198922873 sec
Prefill latency: 0.06984611600637436 sec
Decode latency: 3.3616008944809437 sec
Prefill latency: 0.06972932070493698 sec
Decode latency: 3.3619144540280104 sec
Time for inference 1: 3.43 sec total, 596.64 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4791.32 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.07005510479211807 sec
Decode latency: 3.3633701764047146 sec
Time for inference 2: 3.43 sec total, 596.34 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4788.93 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.07008766010403633 sec
Decode latency: 3.3627562392503023 sec
Time for inference 3: 3.43 sec total, 596.44 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4789.69 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.0699545368552208 sec
Decode latency: 3.3617349546402693 sec
Time for inference 4: 3.43 sec total, 596.66 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4791.48 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06986762396991253 sec
Decode latency: 3.3620509076863527 sec
Time for inference 5: 3.43 sec total, 596.62 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4791.19 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06995928101241589 sec
Decode latency: 3.3618549164384604 sec
Time for inference 6: 3.43 sec total, 596.63 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4791.28 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06981580145657063 sec
Decode latency: 3.3628556951880455 sec
Time for inference 7: 3.43 sec total, 596.49 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4790.14 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06979333609342575 sec
Decode latency: 3.362610839307308 sec
Time for inference 8: 3.43 sec total, 596.53 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4790.47 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06983386538922787 sec
Decode latency: 3.3618622422218323 sec
Time for inference 9: 3.43 sec total, 596.66 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4791.47 GB/s
FLOPS achieved: 14.37 TF/s

Prefill latency: 0.06980270333588123 sec
[rank1]:[W1114 08:09:57.843168394 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 3.3623096887022257 sec
Time for inference 10: 3.43 sec total, 596.57 tokens/sec
Decode latency: 3.36 sec
Prefill latency: 0.07 sec
Bandwidth achieved: 4790.74 GB/s
FLOPS achieved: 14.37 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 3.3623 sec
Average prefill latency: 0.0699 sec
Average tokens/sec: 596.56
Memory used: 11.17 GB
[rank0]:[W1114 08:09:58.760106802 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1114 08:09:59.950269708 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
