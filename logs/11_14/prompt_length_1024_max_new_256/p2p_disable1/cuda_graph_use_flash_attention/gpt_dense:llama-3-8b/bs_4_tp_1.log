flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTDense(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x DenseTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=6144, bias=False)
        (wo): Linear(in_features=4096, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=28672, bias=False)
        (w2): Linear(in_features=14336, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.34 seconds
CUDA_GRAPH are activate
Prefill latency: 0.1302009392529726 sec
Decode latency: 2.360156474635005 sec
Compilation time: 2.49 seconds
Prefill latency: 0.13013482466340065 sec
Decode latency: 2.357940848916769 sec
Prefill latency: 0.13202178664505482 sec
Decode latency: 2.359683135524392 sec
Prefill latency: 0.13099909201264381 sec
Decode latency: 2.3584974110126495 sec
Prefill latency: 0.13040216267108917 sec
Decode latency: 2.3584781121462584 sec
Prefill latency: 0.13112976029515266 sec
Decode latency: 2.351596675813198 sec
Time for inference 1: 2.48 sec total, 412.33 tokens/sec
Decode latency: 2.35 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6189.08 GB/s
FLOPS achieved: 30.95 TF/s

Prefill latency: 0.128456586971879 sec
Decode latency: 2.3590396251529455 sec
Time for inference 2: 2.49 sec total, 411.55 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6177.26 GB/s
FLOPS achieved: 30.89 TF/s

Prefill latency: 0.13212349638342857 sec
Decode latency: 2.3589756973087788 sec
Time for inference 3: 2.49 sec total, 410.94 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6168.18 GB/s
FLOPS achieved: 30.84 TF/s

Prefill latency: 0.1308169011026621 sec
Decode latency: 2.358933247625828 sec
Time for inference 4: 2.49 sec total, 411.17 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6171.63 GB/s
FLOPS achieved: 30.86 TF/s

Prefill latency: 0.13097301684319973 sec
Decode latency: 2.358797127380967 sec
Time for inference 5: 2.49 sec total, 411.17 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6171.61 GB/s
FLOPS achieved: 30.86 TF/s

Prefill latency: 0.13273066841065884 sec
Decode latency: 2.357651172205806 sec
Time for inference 6: 2.49 sec total, 411.06 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6169.97 GB/s
FLOPS achieved: 30.85 TF/s

Prefill latency: 0.13178265281021595 sec
Decode latency: 2.3597973734140396 sec
Time for inference 7: 2.49 sec total, 410.87 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6167.09 GB/s
FLOPS achieved: 30.84 TF/s

Prefill latency: 0.13168377242982388 sec
Decode latency: 2.359348677098751 sec
Time for inference 8: 2.49 sec total, 410.96 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6168.41 GB/s
FLOPS achieved: 30.84 TF/s

Prefill latency: 0.1306109055876732 sec
Decode latency: 2.358861116692424 sec
Time for inference 9: 2.49 sec total, 411.21 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6172.27 GB/s
FLOPS achieved: 30.86 TF/s

Prefill latency: 0.13020292483270168 sec
Decode latency: 2.358825970441103 sec
Time for inference 10: 2.49 sec total, 411.29 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.13 sec
Bandwidth achieved: 6173.43 GB/s
FLOPS achieved: 30.87 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 256
Average decode latency: 2.3582 sec
Average prefill latency: 0.1311 sec
Average tokens/sec: 411.26
Memory used: 21.03 GB
Done. we are killing the process
[rank0]:[W1113 12:00:30.847289073 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
