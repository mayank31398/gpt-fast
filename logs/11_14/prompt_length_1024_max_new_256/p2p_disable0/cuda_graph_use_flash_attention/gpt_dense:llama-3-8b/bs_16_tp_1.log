flash_kv_decode is set to True
Using device=cuda
Loading model ...
GPTDense(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x DenseTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=6144, bias=False)
        (wo): Linear(in_features=4096, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=28672, bias=False)
        (w2): Linear(in_features=14336, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.03 seconds
CUDA_GRAPH are activate
Prefill latency: 0.5236005019396544 sec
Decode latency: 2.5244511123746634 sec
Compilation time: 3.05 seconds
Prefill latency: 0.5246310420334339 sec
Decode latency: 2.590354360640049 sec
Prefill latency: 0.5254374872893095 sec
Decode latency: 2.563025673851371 sec
Prefill latency: 0.5275645479559898 sec
Decode latency: 2.5900993943214417 sec
Prefill latency: 0.525771027430892 sec
Decode latency: 2.5901275612413883 sec
Prefill latency: 0.5271128006279469 sec
Decode latency: 2.589985905215144 sec
Time for inference 1: 3.12 sec total, 1313.76 tokens/sec
Decode latency: 2.59 sec
Prefill latency: 0.53 sec
Bandwidth achieved: 19719.27 GB/s
FLOPS achieved: 98.60 TF/s

Prefill latency: 0.5276235397905111 sec
Decode latency: 2.5904568564146757 sec
Time for inference 2: 3.12 sec total, 1313.27 tokens/sec
Decode latency: 2.59 sec
Prefill latency: 0.53 sec
Bandwidth achieved: 19712.03 GB/s
FLOPS achieved: 98.56 TF/s

Prefill latency: 0.526520824059844 sec
Decode latency: 2.5831108521670103 sec
Time for inference 3: 3.11 sec total, 1316.88 tokens/sec
Decode latency: 2.58 sec
Prefill latency: 0.53 sec
Bandwidth achieved: 19766.15 GB/s
FLOPS achieved: 98.83 TF/s

Prefill latency: 0.5269912332296371 sec
Decode latency: 2.5899515450000763 sec
Time for inference 4: 3.12 sec total, 1313.81 tokens/sec
Decode latency: 2.59 sec
Prefill latency: 0.53 sec
Bandwidth achieved: 19720.06 GB/s
FLOPS achieved: 98.60 TF/s

Prefill latency: 0.5273651890456676 sec
Decode latency: 2.584818398579955 sec
Time for inference 5: 3.11 sec total, 1315.84 tokens/sec
Decode latency: 2.58 sec
Prefill latency: 0.53 sec
Bandwidth achieved: 19750.61 GB/s
FLOPS achieved: 98.75 TF/s

Prefill latency: 0.5289278198033571 sec
Decode latency: 2.5904643926769495 sec
Time for inference 6: 3.12 sec total, 1312.81 tokens/sec
Decode latency: 2.59 sec
Prefill latency: 0.53 sec
Bandwidth achieved: 19705.08 GB/s
FLOPS achieved: 98.53 TF/s

Prefill latency: 0.5241755079478025 sec
Decode latency: 2.5017828308045864 sec
Time for inference 7: 3.03 sec total, 1353.35 tokens/sec
Decode latency: 2.50 sec
Prefill latency: 0.52 sec
Bandwidth achieved: 20313.63 GB/s
FLOPS achieved: 101.57 TF/s

Prefill latency: 0.5268233995884657 sec
Decode latency: 2.539782965555787 sec
Time for inference 8: 3.07 sec total, 1335.40 tokens/sec
Decode latency: 2.54 sec
Prefill latency: 0.53 sec
Bandwidth achieved: 20044.22 GB/s
FLOPS achieved: 100.22 TF/s

Prefill latency: 0.5265480279922485 sec
Decode latency: 2.583320254459977 sec
Time for inference 9: 3.11 sec total, 1316.83 tokens/sec
Decode latency: 2.58 sec
Prefill latency: 0.53 sec
Bandwidth achieved: 19765.49 GB/s
FLOPS achieved: 98.83 TF/s

Prefill latency: 0.5273658093065023 sec
Decode latency: 2.5903559494763613 sec
Time for inference 10: 3.12 sec total, 1313.50 tokens/sec
Decode latency: 2.59 sec
Prefill latency: 0.53 sec
Bandwidth achieved: 19715.43 GB/s
FLOPS achieved: 98.58 TF/s

==========
Batch Size: 16
Prompt Length: 1024
Generated tokens: 256
Average decode latency: 2.5744 sec
Average prefill latency: 0.5269 sec
Average tokens/sec: 1320.55
Memory used: 35.48 GB
Done. we are killing the process
[rank0]:[W1113 11:33:23.158389915 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
