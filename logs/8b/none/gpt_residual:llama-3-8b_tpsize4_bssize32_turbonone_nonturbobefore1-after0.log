[2024-09-13 11:57:48,841] torch.distributed.run: [WARNING] 
[2024-09-13 11:57:48,841] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 11:57:48,841] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 11:57:48,841] torch.distributed.run: [WARNING] *****************************************
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
Using device=cuda
our tp world size is our tp world size is Loading model ...
4
4
our tp world size isour tp world size is our tp world size is  444


our tp world size isour tp world size is our tp world size is 44
 4
our tp world size isour tp world size is 
 44
our tp world size is 
our tp world size is 4our tp world size is 4

4
our tp world size is our tp world size isour tp world size is 4
 4
our tp world size is 4our tp world size is 4

4
our tp world size is our tp world size isour tp world size is 4
 4
our tp world size is 4our tp world size is 4

4
our tp world size is our tp world size isour tp world size is 4
 44
our tp world size is 
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is4
our tp world size is  4our tp world size is 4

our tp world size is4
our tp world size is  4our tp world size is 4

our tp world size is4
our tp world size is  4our tp world size is 4

4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size isour tp world size isour tp world size is  4 44


our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4our tp world size is our tp world size is 
44
our tp world size is 
our tp world size is 4
our tp world size is 4
our tp world size is 4
applying tp to block 0
4
applying tp to block 0
applying tp to block 0
our tp world size is applying tp to block 0
applying tp to block 0
4
applying tp to block 0
applying tp to block 0
our tp world size is applying tp to block 0
applying tp to block 0
4
applying tp to block 0
applying tp to block 0
our tp world size is applying tp to block 0
applying tp to block 0
4
applying tp to block 0
applying tp to block 0
our tp world size is applying tp to block 0
applying tp to block 0
4
applying tp to block 0
applying tp to block 0
Applying tensor parallel to model ...
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
applying tp to block 0
we finish operating the TP!
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is False
models all reduce stream is None
Time to load model: 0.85 seconds
the shape of input is torch.Size([32, 1024])
[rank0]:[W CUDAGraph.cpp:145] Warning: Waiting for pending NCCL work to finish before starting graph capture. (function operator())
tokens we generated: 1024
Time for prefill: 97.37 sec
Time for inference -4: 227.54 sec total, 4.50 tokens/sec
Bandwidth achieved: 20.44 GB/s
FLOPS achieved: 1.31 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 1.22 sec
Time for inference -3: 11.42 sec total, 89.69 tokens/sec
Bandwidth achieved: 407.25 GB/s
FLOPS achieved: 26.06 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference -2: 9.53 sec total, 107.45 tokens/sec
Bandwidth achieved: 487.91 GB/s
FLOPS achieved: 31.23 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference -1: 9.54 sec total, 107.38 tokens/sec
Bandwidth achieved: 487.62 GB/s
FLOPS achieved: 31.21 TF/s

the shape of input is torch.Size([32, 1024])
Compilation time: 9.54 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 1: 9.54 sec total, 107.36 tokens/sec
Bandwidth achieved: 487.52 GB/s
FLOPS achieved: 31.20 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 2: 9.54 sec total, 107.39 tokens/sec
Bandwidth achieved: 487.63 GB/s
FLOPS achieved: 31.21 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 3: 9.54 sec total, 107.38 tokens/sec
Bandwidth achieved: 487.61 GB/s
FLOPS achieved: 31.21 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 4: 9.54 sec total, 107.39 tokens/sec
Bandwidth achieved: 487.63 GB/s
FLOPS achieved: 31.21 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 5: 9.53 sec total, 107.41 tokens/sec
Bandwidth achieved: 487.74 GB/s
FLOPS achieved: 31.22 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 6: 9.54 sec total, 107.31 tokens/sec
Bandwidth achieved: 487.29 GB/s
FLOPS achieved: 31.19 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 7: 9.54 sec total, 107.38 tokens/sec
Bandwidth achieved: 487.62 GB/s
FLOPS achieved: 31.21 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 8: 9.54 sec total, 107.38 tokens/sec
Bandwidth achieved: 487.59 GB/s
FLOPS achieved: 31.21 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 9: 9.53 sec total, 107.40 tokens/sec
Bandwidth achieved: 487.69 GB/s
FLOPS achieved: 31.21 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.38 sec
Time for inference 10: 9.53 sec total, 107.40 tokens/sec
Bandwidth achieved: 487.68 GB/s
FLOPS achieved: 31.21 TF/s

==========
Batch Size: 32
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.45 sec
Average tokens/sec: 106.02
Memory used: 33.28 GB
