[2024-09-13 10:43:06,537] torch.distributed.run: [WARNING] 
[2024-09-13 10:43:06,537] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 10:43:06,537] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 10:43:06,537] torch.distributed.run: [WARNING] *****************************************
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is Using device=cuda
4
our tp world size is our tp world size isLoading model ...
our tp world size is4
  4our tp world size is 4
our tp world size is 
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size isour tp world size is 4
our tp world size is  44our tp world size is 4


our tp world size is4
our tp world size is our tp world size is  our tp world size is 4
4
4
4
our tp world size is our tp world size is our tp world size is our tp world size is 4
44
4
our tp world size is 
our tp world size is our tp world size is 4
our tp world size is4
4
our tp world size is  4our tp world size is our tp world size is 4

4
4
our tp world size is our tp world size is our tp world size is our tp world size is 4
4
4
4
our tp world size is our tp world size is our tp world size isour tp world size is 4
4
 44
our tp world size is our tp world size is 
our tp world size isour tp world size is 4
4
 44
our tp world size is our tp world size is 
our tp world size isour tp world size is 4
4
 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size isour tp world size is 4
our tp world size is  44
our tp world size is 4

our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
applying tp to block 0
44
our tp world size is applying tp to block 0

our tp world size isour tp world size is4
applying tp to block 0
 4 4our tp world size is applying tp to block 0


our tp world size is4
applying tp to block 0
our tp world size is  4our tp world size is applying tp to block 0
4

4
applying tp to block 0
our tp world size is our tp world size isour tp world size is applying tp to block 0
4
 44
applying tp to block 0
our tp world size is
our tp world size isapplying tp to block 0
 our tp world size is  applying tp to block 0
44
4
applying tp to block 0

our tp world size is our tp world size isapplying tp to block 0
our tp world size is 4
 applying tp to block 0
4
our tp world size is 4applying tp to block 0
our tp world size is 4

applying tp to block 0
4
our tp world size isour tp world size is applying tp to block 0our tp world size is  44

4

our tp world size is applying tp to block 0our tp world size isour tp world size is 4

 44
our tp world size is applying tp to block 0

our tp world size is 4
applying tp to block 0
our tp world size is 4our tp world size is applying tp to block 04

4

our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0our tp world size is our tp world size isour tp world size is 
4
 44
applying tp to block 0
our tp world size is 
our tp world size isour tp world size is applying tp to block 0
4
 44
applying tp to block 0
applying tp to block 0

our tp world size isapplying tp to block 0
applying tp to block 0 applying tp to block 0
applying tp to block 0
4
applying tp to block 0

applying tp to block 0applying tp to block 0Applying tensor parallel to model ...
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
we finish operating the TP!
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0applying tp to block 0


applying tp to block 0applying tp to block 0
we finish operating the TP!

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
we finish operating the TP!we finish operating the TP!

GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is False
models all reduce stream is None
Time to load model: 0.92 seconds
the shape of input is torch.Size([1, 1024])
[rank1]:[W CUDAGraph.cpp:145] Warning: Waiting for pending NCCL work to finish before starting graph capture. (function operator())
tokens we generated: 1024
Time for prefill: 98.71 sec
Time for inference -4: 218.32 sec total, 4.69 tokens/sec
Bandwidth achieved: 21.30 GB/s
FLOPS achieved: 0.04 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.78 sec
Time for inference -3: 5.61 sec total, 182.42 tokens/sec
Bandwidth achieved: 828.33 GB/s
FLOPS achieved: 1.66 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference -2: 4.26 sec total, 240.49 tokens/sec
Bandwidth achieved: 1092.03 GB/s
FLOPS achieved: 2.18 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference -1: 4.24 sec total, 241.32 tokens/sec
Bandwidth achieved: 1095.82 GB/s
FLOPS achieved: 2.19 TF/s

the shape of input is torch.Size([1, 1024])
Compilation time: 4.24 seconds
the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 1: 4.24 sec total, 241.53 tokens/sec
Bandwidth achieved: 1096.76 GB/s
FLOPS achieved: 2.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 2: 4.24 sec total, 241.55 tokens/sec
Bandwidth achieved: 1096.86 GB/s
FLOPS achieved: 2.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 3: 4.24 sec total, 241.53 tokens/sec
Bandwidth achieved: 1096.74 GB/s
FLOPS achieved: 2.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 4: 4.29 sec total, 238.96 tokens/sec
Bandwidth achieved: 1085.11 GB/s
FLOPS achieved: 2.17 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 5: 4.25 sec total, 240.92 tokens/sec
Bandwidth achieved: 1093.97 GB/s
FLOPS achieved: 2.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 6: 4.29 sec total, 238.75 tokens/sec
Bandwidth achieved: 1084.11 GB/s
FLOPS achieved: 2.17 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 7: 4.24 sec total, 241.48 tokens/sec
Bandwidth achieved: 1096.51 GB/s
FLOPS achieved: 2.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 8: 4.27 sec total, 239.55 tokens/sec
Bandwidth achieved: 1087.78 GB/s
FLOPS achieved: 2.18 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 9: 4.27 sec total, 239.98 tokens/sec
Bandwidth achieved: 1089.72 GB/s
FLOPS achieved: 2.18 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 10: 4.26 sec total, 240.15 tokens/sec
Bandwidth achieved: 1090.47 GB/s
FLOPS achieved: 2.18 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.08 sec
Average tokens/sec: 236.05
Memory used: 6.78 GB
