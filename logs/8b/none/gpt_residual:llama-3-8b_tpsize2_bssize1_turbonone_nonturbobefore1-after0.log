[2024-09-13 10:37:59,587] torch.distributed.run: [WARNING] 
[2024-09-13 10:37:59,587] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 10:37:59,587] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 10:37:59,587] torch.distributed.run: [WARNING] *****************************************
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2Using device=cuda

Loading model ...our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
Applying tensor parallel to model ...
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is False
models all reduce stream is None
Time to load model: 0.50 seconds
the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 112.69 sec
Time for inference -4: 219.73 sec total, 4.66 tokens/sec
Bandwidth achieved: 37.42 GB/s
FLOPS achieved: 0.07 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.69 sec
Time for inference -3: 6.29 sec total, 162.87 tokens/sec
Bandwidth achieved: 1307.97 GB/s
FLOPS achieved: 2.62 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference -2: 5.16 sec total, 198.47 tokens/sec
Bandwidth achieved: 1593.84 GB/s
FLOPS achieved: 3.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference -1: 5.17 sec total, 198.05 tokens/sec
Bandwidth achieved: 1590.44 GB/s
FLOPS achieved: 3.18 TF/s

the shape of input is torch.Size([1, 1024])
Compilation time: 5.16 seconds
the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 1: 5.18 sec total, 197.58 tokens/sec
Bandwidth achieved: 1586.64 GB/s
FLOPS achieved: 3.17 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 2: 5.16 sec total, 198.40 tokens/sec
Bandwidth achieved: 1593.29 GB/s
FLOPS achieved: 3.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 3: 5.18 sec total, 197.84 tokens/sec
Bandwidth achieved: 1588.75 GB/s
FLOPS achieved: 3.18 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 4: 5.16 sec total, 198.40 tokens/sec
Bandwidth achieved: 1593.27 GB/s
FLOPS achieved: 3.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 5: 5.18 sec total, 197.58 tokens/sec
Bandwidth achieved: 1586.65 GB/s
FLOPS achieved: 3.17 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 6: 5.16 sec total, 198.42 tokens/sec
Bandwidth achieved: 1593.40 GB/s
FLOPS achieved: 3.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 7: 5.17 sec total, 198.16 tokens/sec
Bandwidth achieved: 1591.32 GB/s
FLOPS achieved: 3.18 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 8: 5.16 sec total, 198.37 tokens/sec
Bandwidth achieved: 1593.04 GB/s
FLOPS achieved: 3.19 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 9: 5.17 sec total, 197.98 tokens/sec
Bandwidth achieved: 1589.88 GB/s
FLOPS achieved: 3.18 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 10: 5.15 sec total, 198.69 tokens/sec
Bandwidth achieved: 1595.61 GB/s
FLOPS achieved: 3.19 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.08 sec
Average tokens/sec: 195.45
Memory used: 10.62 GB
