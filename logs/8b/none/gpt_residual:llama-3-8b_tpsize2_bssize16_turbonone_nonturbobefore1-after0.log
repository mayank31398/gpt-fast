[2024-09-13 11:22:42,022] torch.distributed.run: [WARNING] 
[2024-09-13 11:22:42,022] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 11:22:42,022] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 11:22:42,022] torch.distributed.run: [WARNING] *****************************************
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
Using device=cuda
our tp world size is Loading model ...
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
Applying tensor parallel to model ...
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0applying tp to block 0

applying tp to block 0applying tp to block 0

applying tp to block 0applying tp to block 0

applying tp to block 0applying tp to block 0

we finish operating the TP!
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is False
models all reduce stream is None
Time to load model: 1.23 seconds
the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 118.39 sec
Time for inference -4: 242.80 sec total, 4.22 tokens/sec
Bandwidth achieved: 33.87 GB/s
FLOPS achieved: 1.08 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 1.19 sec
Time for inference -3: 11.71 sec total, 87.46 tokens/sec
Bandwidth achieved: 702.38 GB/s
FLOPS achieved: 22.48 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference -2: 10.03 sec total, 102.13 tokens/sec
Bandwidth achieved: 820.14 GB/s
FLOPS achieved: 26.24 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference -1: 10.01 sec total, 102.27 tokens/sec
Bandwidth achieved: 821.32 GB/s
FLOPS achieved: 26.28 TF/s

the shape of input is torch.Size([16, 1024])
Compilation time: 10.04 seconds
the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 1: 10.02 sec total, 102.21 tokens/sec
Bandwidth achieved: 820.81 GB/s
FLOPS achieved: 26.27 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 2: 10.02 sec total, 102.18 tokens/sec
Bandwidth achieved: 820.55 GB/s
FLOPS achieved: 26.26 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 3: 10.01 sec total, 102.26 tokens/sec
Bandwidth achieved: 821.22 GB/s
FLOPS achieved: 26.28 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 4: 10.01 sec total, 102.26 tokens/sec
Bandwidth achieved: 821.19 GB/s
FLOPS achieved: 26.28 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 5: 10.01 sec total, 102.27 tokens/sec
Bandwidth achieved: 821.30 GB/s
FLOPS achieved: 26.28 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 6: 10.02 sec total, 102.16 tokens/sec
Bandwidth achieved: 820.40 GB/s
FLOPS achieved: 26.25 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 7: 10.04 sec total, 102.02 tokens/sec
Bandwidth achieved: 819.31 GB/s
FLOPS achieved: 26.22 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 8: 10.01 sec total, 102.26 tokens/sec
Bandwidth achieved: 821.18 GB/s
FLOPS achieved: 26.28 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 9: 10.01 sec total, 102.25 tokens/sec
Bandwidth achieved: 821.12 GB/s
FLOPS achieved: 26.28 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.32 sec
Time for inference 10: 10.01 sec total, 102.25 tokens/sec
Bandwidth achieved: 821.13 GB/s
FLOPS achieved: 26.28 TF/s

==========
Batch Size: 16
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.39 sec
Average tokens/sec: 101.08
Memory used: 26.11 GB
