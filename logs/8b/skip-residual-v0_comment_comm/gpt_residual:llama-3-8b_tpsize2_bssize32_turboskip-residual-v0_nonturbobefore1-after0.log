[2024-09-13 09:31:05,912] torch.distributed.run: [WARNING] 
[2024-09-13 09:31:05,912] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 09:31:05,912] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 09:31:05,912] torch.distributed.run: [WARNING] *****************************************
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is Using device=cuda
2
Loading model ...
our tp world size is 2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size isour tp world size is  22

our tp world size is our tp world size is 2
2
our tp world size isour tp world size is  22

our tp world size is our tp world size is2
 our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size isour tp world size is  22

our tp world size is our tp world size is 2
2
our tp world size isour tp world size is 2 2

our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size isour tp world size is  2
2
our tp world size is our tp world size is 2
2
our tp world size is 2
our tp world size is 2we finish operating the TP!

our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
Applying tensor parallel to model ...
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
models all reduce stream is None
Time to load model: 0.34 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 56.90 sec
Time for inference -4: 143.39 sec total, 7.14 tokens/sec
Bandwidth achieved: 57.35 GB/s
FLOPS achieved: 3.67 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 1.09 sec
Time for inference -3: 13.11 sec total, 78.11 tokens/sec
Bandwidth achieved: 627.25 GB/s
FLOPS achieved: 40.14 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference -2: 12.12 sec total, 84.50 tokens/sec
Bandwidth achieved: 678.56 GB/s
FLOPS achieved: 43.43 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference -1: 12.11 sec total, 84.55 tokens/sec
Bandwidth achieved: 679.02 GB/s
FLOPS achieved: 43.46 TF/s

the shape of input is torch.Size([32, 1024])
Compilation time: 12.13 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 1: 12.11 sec total, 84.53 tokens/sec
Bandwidth achieved: 678.85 GB/s
FLOPS achieved: 43.45 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 2: 12.12 sec total, 84.52 tokens/sec
Bandwidth achieved: 678.74 GB/s
FLOPS achieved: 43.44 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 3: 12.11 sec total, 84.57 tokens/sec
Bandwidth achieved: 679.14 GB/s
FLOPS achieved: 43.46 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 4: 12.11 sec total, 84.56 tokens/sec
Bandwidth achieved: 679.05 GB/s
FLOPS achieved: 43.46 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 5: 12.11 sec total, 84.59 tokens/sec
Bandwidth achieved: 679.30 GB/s
FLOPS achieved: 43.48 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 6: 12.11 sec total, 84.56 tokens/sec
Bandwidth achieved: 679.03 GB/s
FLOPS achieved: 43.46 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 7: 12.11 sec total, 84.55 tokens/sec
Bandwidth achieved: 679.00 GB/s
FLOPS achieved: 43.46 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 8: 12.12 sec total, 84.47 tokens/sec
Bandwidth achieved: 678.34 GB/s
FLOPS achieved: 43.41 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 9: 12.11 sec total, 84.59 tokens/sec
Bandwidth achieved: 679.29 GB/s
FLOPS achieved: 43.47 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.59 sec
Time for inference 10: 12.10 sec total, 84.62 tokens/sec
Bandwidth achieved: 679.55 GB/s
FLOPS achieved: 43.49 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 11: 12.11 sec total, 84.57 tokens/sec
Bandwidth achieved: 679.16 GB/s
FLOPS achieved: 43.47 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 12: 12.11 sec total, 84.55 tokens/sec
Bandwidth achieved: 678.99 GB/s
FLOPS achieved: 43.46 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 13: 12.11 sec total, 84.59 tokens/sec
Bandwidth achieved: 679.29 GB/s
FLOPS achieved: 43.47 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 14: 12.12 sec total, 84.49 tokens/sec
Bandwidth achieved: 678.53 GB/s
FLOPS achieved: 43.43 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 15: 12.11 sec total, 84.56 tokens/sec
Bandwidth achieved: 679.10 GB/s
FLOPS achieved: 43.46 TF/s

STAGE:2024-09-13 09:37:24 45302:45302 ActivityProfilerController.cpp:314] Completed Stage: Warm Up
STAGE:2024-09-13 09:37:24 45302:45302 ActivityProfilerController.cpp:320] Completed Stage: Collection
STAGE:2024-09-13 09:37:24 45302:45302 ActivityProfilerController.cpp:324] Completed Stage: Post Processing
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 16: 12.25 sec total, 83.60 tokens/sec
Bandwidth achieved: 671.38 GB/s
FLOPS achieved: 42.97 TF/s

==========
Batch Size: 32
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.62 sec
Average tokens/sec: 84.16
Memory used: 45.57 GB
