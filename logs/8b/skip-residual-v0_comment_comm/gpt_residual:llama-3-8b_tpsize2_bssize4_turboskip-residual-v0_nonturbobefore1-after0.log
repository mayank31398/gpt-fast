[2024-09-13 08:45:39,785] torch.distributed.run: [WARNING] 
[2024-09-13 08:45:39,785] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 08:45:39,785] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 08:45:39,785] torch.distributed.run: [WARNING] *****************************************
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
Using device=cuda
our tp world size is Loading model ...
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size isour tp world size is  22

our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is2
 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is2
 2our tp world size is 
2
our tp world size is our tp world size is2
 2our tp world size is
 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size isour tp world size is  2
2
our tp world size is our tp world size is 22

our tp world size is our tp world size is 2
2
our tp world size is 2
we finish operating the TP!
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
Applying tensor parallel to model ...
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
models all reduce stream is None
Time to load model: 0.31 seconds
the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 57.94 sec
Time for inference -4: 153.68 sec total, 6.66 tokens/sec
Bandwidth achieved: 53.51 GB/s
FLOPS achieved: 0.43 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.47 sec
Time for inference -3: 6.51 sec total, 157.39 tokens/sec
Bandwidth achieved: 1263.92 GB/s
FLOPS achieved: 10.11 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference -2: 5.66 sec total, 180.82 tokens/sec
Bandwidth achieved: 1452.10 GB/s
FLOPS achieved: 11.62 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference -1: 5.63 sec total, 181.74 tokens/sec
Bandwidth achieved: 1459.49 GB/s
FLOPS achieved: 11.68 TF/s

the shape of input is torch.Size([4, 1024])
Compilation time: 5.65 seconds
the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 1: 5.64 sec total, 181.44 tokens/sec
Bandwidth achieved: 1457.07 GB/s
FLOPS achieved: 11.66 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 2: 5.61 sec total, 182.61 tokens/sec
Bandwidth achieved: 1466.46 GB/s
FLOPS achieved: 11.73 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 3: 5.61 sec total, 182.44 tokens/sec
Bandwidth achieved: 1465.09 GB/s
FLOPS achieved: 11.72 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 4: 5.61 sec total, 182.58 tokens/sec
Bandwidth achieved: 1466.22 GB/s
FLOPS achieved: 11.73 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 5: 5.62 sec total, 182.18 tokens/sec
Bandwidth achieved: 1463.00 GB/s
FLOPS achieved: 11.70 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 6: 5.63 sec total, 181.90 tokens/sec
Bandwidth achieved: 1460.79 GB/s
FLOPS achieved: 11.69 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 7: 5.61 sec total, 182.64 tokens/sec
Bandwidth achieved: 1466.74 GB/s
FLOPS achieved: 11.73 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 8: 5.65 sec total, 181.35 tokens/sec
Bandwidth achieved: 1456.36 GB/s
FLOPS achieved: 11.65 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 9: 5.61 sec total, 182.52 tokens/sec
Bandwidth achieved: 1465.72 GB/s
FLOPS achieved: 11.73 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 10: 5.61 sec total, 182.44 tokens/sec
Bandwidth achieved: 1465.11 GB/s
FLOPS achieved: 11.72 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 11: 5.62 sec total, 182.35 tokens/sec
Bandwidth achieved: 1464.33 GB/s
FLOPS achieved: 11.71 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 12: 5.61 sec total, 182.49 tokens/sec
Bandwidth achieved: 1465.51 GB/s
FLOPS achieved: 11.72 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 13: 5.64 sec total, 181.41 tokens/sec
Bandwidth achieved: 1456.82 GB/s
FLOPS achieved: 11.65 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 14: 5.61 sec total, 182.59 tokens/sec
Bandwidth achieved: 1466.29 GB/s
FLOPS achieved: 11.73 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.07 sec
Time for inference 15: 5.61 sec total, 182.68 tokens/sec
Bandwidth achieved: 1467.02 GB/s
FLOPS achieved: 11.74 TF/s

STAGE:2024-09-13 08:50:04 4161449:4161449 ActivityProfilerController.cpp:314] Completed Stage: Warm Up
STAGE:2024-09-13 08:50:04 4161449:4161449 ActivityProfilerController.cpp:320] Completed Stage: Collection
STAGE:2024-09-13 08:50:04 4161449:4161449 ActivityProfilerController.cpp:324] Completed Stage: Post Processing
the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.08 sec
Time for inference 16: 5.73 sec total, 178.84 tokens/sec
Bandwidth achieved: 1436.15 GB/s
FLOPS achieved: 11.49 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.10 sec
Average tokens/sec: 180.65
Memory used: 13.88 GB
