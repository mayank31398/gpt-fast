[2024-09-13 09:38:07,838] torch.distributed.run: [WARNING] 
[2024-09-13 09:38:07,838] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 09:38:07,838] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 09:38:07,838] torch.distributed.run: [WARNING] *****************************************
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is our tp world size is4
 4
our tp world size is our tp world size is our tp world size is 4
4
Using device=cuda
4
our tp world size is our tp world size is Loading model ...
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is4
our tp world size is 4
 our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4our tp world size is 4
our tp world size is 
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is4
our tp world size is 4 our tp world size is 4

our tp world size is4
4
our tp world size is 4our tp world size is our tp world size is  4
44

our tp world size is 
our tp world size isour tp world size is 4
our tp world size is 44
our tp world size is  4
our tp world size is 4

our tp world size is 4our tp world size is our tp world size is 4

44our tp world size is 

4
our tp world size isour tp world size is we finish operating the TP!
our tp world size is  44
4

our tp world size isour tp world size is our tp world size is  44
4

our tp world size is our tp world size isour tp world size is 4
 44our tp world size is 

4
our tp world size is our tp world size is our tp world size is 44
4

our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size isour tp world size is 4 4

our tp world size is4
our tp world size is  4our tp world size is 4

4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size isour tp world size is our tp world size is 44
 4
our tp world size is 
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4our tp world size is 4

4
our tp world size is our tp world size is our tp world size is 44
4

our tp world size is our tp world size isour tp world size is4
  4our tp world size is4

our tp world size is 4our tp world size is  4
4our tp world size is
our tp world size is
 4 4our tp world size is 

our tp world size is4
our tp world size is  4our tp world size is 4

4
our tp world size isour tp world size is our tp world size is  44
4
our tp world size is 
our tp world size is 44
we finish operating the TP!
our tp world size is 4

we finish operating the TP!our tp world size is 
4
Applying tensor parallel to model ...
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
models all reduce stream is None
Time to load model: 0.44 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 56.72 sec
Time for inference -4: 121.94 sec total, 8.40 tokens/sec
Bandwidth achieved: 38.13 GB/s
FLOPS achieved: 2.44 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.86 sec
Time for inference -3: 8.55 sec total, 119.71 tokens/sec
Bandwidth achieved: 543.61 GB/s
FLOPS achieved: 34.79 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference -2: 7.49 sec total, 136.68 tokens/sec
Bandwidth achieved: 620.66 GB/s
FLOPS achieved: 39.72 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference -1: 7.48 sec total, 136.96 tokens/sec
Bandwidth achieved: 621.90 GB/s
FLOPS achieved: 39.80 TF/s

the shape of input is torch.Size([32, 1024])
Compilation time: 7.47 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 1: 7.47 sec total, 137.08 tokens/sec
Bandwidth achieved: 622.48 GB/s
FLOPS achieved: 39.84 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 2: 7.48 sec total, 136.97 tokens/sec
Bandwidth achieved: 621.97 GB/s
FLOPS achieved: 39.81 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 3: 7.48 sec total, 136.85 tokens/sec
Bandwidth achieved: 621.42 GB/s
FLOPS achieved: 39.77 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 4: 7.48 sec total, 136.82 tokens/sec
Bandwidth achieved: 621.30 GB/s
FLOPS achieved: 39.76 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 5: 7.48 sec total, 136.91 tokens/sec
Bandwidth achieved: 621.68 GB/s
FLOPS achieved: 39.79 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 6: 7.47 sec total, 137.08 tokens/sec
Bandwidth achieved: 622.44 GB/s
FLOPS achieved: 39.84 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 7: 7.46 sec total, 137.21 tokens/sec
Bandwidth achieved: 623.06 GB/s
FLOPS achieved: 39.88 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 8: 7.46 sec total, 137.25 tokens/sec
Bandwidth achieved: 623.24 GB/s
FLOPS achieved: 39.89 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 9: 7.47 sec total, 137.05 tokens/sec
Bandwidth achieved: 622.33 GB/s
FLOPS achieved: 39.83 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 10: 7.48 sec total, 136.81 tokens/sec
Bandwidth achieved: 621.23 GB/s
FLOPS achieved: 39.76 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 11: 7.46 sec total, 137.18 tokens/sec
Bandwidth achieved: 622.90 GB/s
FLOPS achieved: 39.87 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 12: 7.46 sec total, 137.19 tokens/sec
Bandwidth achieved: 622.97 GB/s
FLOPS achieved: 39.87 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 13: 7.46 sec total, 137.20 tokens/sec
Bandwidth achieved: 622.99 GB/s
FLOPS achieved: 39.87 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 14: 7.46 sec total, 137.20 tokens/sec
Bandwidth achieved: 623.00 GB/s
FLOPS achieved: 39.87 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 15: 7.46 sec total, 137.22 tokens/sec
Bandwidth achieved: 623.08 GB/s
FLOPS achieved: 39.88 TF/s

STAGE:2024-09-13 09:42:37 50640:50640 ActivityProfilerController.cpp:314] Completed Stage: Warm Up
STAGE:2024-09-13 09:42:37 50640:50640 ActivityProfilerController.cpp:320] Completed Stage: Collection
STAGE:2024-09-13 09:42:37 50640:50640 ActivityProfilerController.cpp:324] Completed Stage: Post Processing
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.33 sec
Time for inference 16: 7.58 sec total, 135.11 tokens/sec
Bandwidth achieved: 613.52 GB/s
FLOPS achieved: 39.26 TF/s

==========
Batch Size: 32
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.36 sec
Average tokens/sec: 136.03
Memory used: 34.62 GB
