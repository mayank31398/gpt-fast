[2024-09-13 11:30:14,881] torch.distributed.run: [WARNING] 
[2024-09-13 11:30:14,881] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 11:30:14,881] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 11:30:14,881] torch.distributed.run: [WARNING] *****************************************
our tp world size is 2
our tp world size is 2
our tp world size is 2
Using device=cuda
our tp world size is Loading model ...
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 22

our tp world size isour tp world size is  2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is2
 2our tp world size is 
our tp world size is2
 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2our tp world size is 
2our tp world size is 
2
our tp world size isour tp world size is  22

our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2our tp world size is 
our tp world size is2
 2our tp world size is 
applying tp to block 02

applying tp to block 0our tp world size is 
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0our tp world size is 
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
Applying tensor parallel to model ...
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is False
models all reduce stream is None
Time to load model: 0.61 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 73.98 sec
Time for inference -4: 156.43 sec total, 6.55 tokens/sec
Bandwidth achieved: 52.57 GB/s
FLOPS achieved: 3.36 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 1.37 sec
Time for inference -3: 14.97 sec total, 68.39 tokens/sec
Bandwidth achieved: 549.24 GB/s
FLOPS achieved: 35.15 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.63 sec
Time for inference -2: 13.68 sec total, 74.86 tokens/sec
Bandwidth achieved: 601.13 GB/s
FLOPS achieved: 38.47 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.63 sec
Time for inference -1: 13.67 sec total, 74.90 tokens/sec
Bandwidth achieved: 601.48 GB/s
FLOPS achieved: 38.49 TF/s

the shape of input is torch.Size([32, 1024])
Compilation time: 13.69 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.64 sec
Time for inference 1: 13.67 sec total, 74.89 tokens/sec
Bandwidth achieved: 601.43 GB/s
FLOPS achieved: 38.49 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.63 sec
Time for inference 2: 13.66 sec total, 74.94 tokens/sec
Bandwidth achieved: 601.80 GB/s
FLOPS achieved: 38.52 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.65 sec
Time for inference 3: 13.68 sec total, 74.86 tokens/sec
Bandwidth achieved: 601.18 GB/s
FLOPS achieved: 38.48 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.64 sec
Time for inference 4: 13.67 sec total, 74.93 tokens/sec
Bandwidth achieved: 601.71 GB/s
FLOPS achieved: 38.51 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.63 sec
Time for inference 5: 13.67 sec total, 74.90 tokens/sec
Bandwidth achieved: 601.47 GB/s
FLOPS achieved: 38.49 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.64 sec
Time for inference 6: 13.68 sec total, 74.87 tokens/sec
Bandwidth achieved: 601.23 GB/s
FLOPS achieved: 38.48 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.63 sec
Time for inference 7: 13.67 sec total, 74.93 tokens/sec
Bandwidth achieved: 601.71 GB/s
FLOPS achieved: 38.51 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.64 sec
Time for inference 8: 13.66 sec total, 74.94 tokens/sec
Bandwidth achieved: 601.81 GB/s
FLOPS achieved: 38.52 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.64 sec
Time for inference 9: 13.66 sec total, 74.95 tokens/sec
Bandwidth achieved: 601.85 GB/s
FLOPS achieved: 38.52 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.63 sec
Time for inference 10: 13.67 sec total, 74.92 tokens/sec
Bandwidth achieved: 601.65 GB/s
FLOPS achieved: 38.51 TF/s

==========
Batch Size: 32
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.69 sec
Average tokens/sec: 74.41
Memory used: 43.95 GB
