[2024-09-13 11:15:18,159] torch.distributed.run: [WARNING] 
[2024-09-13 11:15:18,159] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 11:15:18,159] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 11:15:18,159] torch.distributed.run: [WARNING] *****************************************
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is our tp world size is Using device=cudaour tp world size is 4
4

4
our tp world size is Loading model ...our tp world size is our tp world size is 4

4
4
our tp world size is our tp world size is our tp world size is our tp world size is 4
4
4
4
our tp world size is our tp world size is our tp world size is our tp world size is 4
44
4
our tp world size is 
our tp world size is our tp world size is 4
our tp world size is4
4
our tp world size is  4our tp world size is our tp world size is 4

4
4
our tp world size is our tp world size is our tp world size is our tp world size is 4
4
4
4
our tp world size is our tp world size is our tp world size is our tp world size is 4
44
4
our tp world size is 
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 44
our tp world size is 4

our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4our tp world size is4
our tp world size is 
 4our tp world size is 4
our tp world size is 
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size isour tp world size is 4
our tp world size is  44
our tp world size is 4

our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
applying tp to block 0
4
our tp world size is our tp world size is applying tp to block 0
our tp world size is 4
4
applying tp to block 0
4
our tp world size is our tp world size is applying tp to block 0
our tp world size is 4
4
applying tp to block 0
4
our tp world size is our tp world size is applying tp to block 0
our tp world size is 4
4
applying tp to block 0
4
our tp world size is our tp world size is applying tp to block 0
our tp world size is 4
4applying tp to block 0
4
our tp world size is 
applying tp to block 0
our tp world size is 4
our tp world size is applying tp to block 0
4
applying tp to block 0
4
applying tp to block 0
our tp world size is applying tp to block 0
applying tp to block 0
applying tp to block 0
4
applying tp to block 0
applying tp to block 0
applying tp to block 0
our tp world size is applying tp to block 0
applying tp to block 0
applying tp to block 0
4
applying tp to block 0
applying tp to block 0
applying tp to block 0
Applying tensor parallel to model ...
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
we finish operating the TP!


applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0applying tp to block 0applying tp to block 0


applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0


we finish operating the TP!
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is False
models all reduce stream is None
Time to load model: 0.86 seconds
the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 76.36 sec
Time for inference -4: 167.03 sec total, 6.13 tokens/sec
Bandwidth achieved: 27.84 GB/s
FLOPS achieved: 0.89 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.94 sec
Time for inference -3: 8.15 sec total, 125.63 tokens/sec
Bandwidth achieved: 570.49 GB/s
FLOPS achieved: 18.26 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.19 sec
Time for inference -2: 7.22 sec total, 141.91 tokens/sec
Bandwidth achieved: 644.40 GB/s
FLOPS achieved: 20.62 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.19 sec
Time for inference -1: 7.21 sec total, 142.10 tokens/sec
Bandwidth achieved: 645.25 GB/s
FLOPS achieved: 20.65 TF/s

the shape of input is torch.Size([16, 1024])
Compilation time: 7.21 seconds
the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.20 sec
Time for inference 1: 7.21 sec total, 142.11 tokens/sec
Bandwidth achieved: 645.31 GB/s
FLOPS achieved: 20.65 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.20 sec
Time for inference 2: 7.21 sec total, 141.94 tokens/sec
Bandwidth achieved: 644.54 GB/s
FLOPS achieved: 20.63 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.20 sec
Time for inference 3: 7.22 sec total, 141.79 tokens/sec
Bandwidth achieved: 643.85 GB/s
FLOPS achieved: 20.60 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.19 sec
Time for inference 4: 7.22 sec total, 141.90 tokens/sec
Bandwidth achieved: 644.35 GB/s
FLOPS achieved: 20.62 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.19 sec
Time for inference 5: 7.21 sec total, 141.95 tokens/sec
Bandwidth achieved: 644.56 GB/s
FLOPS achieved: 20.63 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.20 sec
Time for inference 6: 7.21 sec total, 142.02 tokens/sec
Bandwidth achieved: 644.89 GB/s
FLOPS achieved: 20.64 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.19 sec
Time for inference 7: 7.20 sec total, 142.18 tokens/sec
Bandwidth achieved: 645.62 GB/s
FLOPS achieved: 20.66 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.20 sec
Time for inference 8: 7.18 sec total, 142.57 tokens/sec
Bandwidth achieved: 647.39 GB/s
FLOPS achieved: 20.72 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.19 sec
Time for inference 9: 7.17 sec total, 142.79 tokens/sec
Bandwidth achieved: 648.39 GB/s
FLOPS achieved: 20.75 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.19 sec
Time for inference 10: 7.18 sec total, 142.54 tokens/sec
Bandwidth achieved: 647.26 GB/s
FLOPS achieved: 20.71 TF/s

==========
Batch Size: 16
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.25 sec
Average tokens/sec: 140.88
Memory used: 22.67 GB
