[2024-09-13 10:56:35,273] torch.distributed.run: [WARNING] 
[2024-09-13 10:56:35,273] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 10:56:35,273] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 10:56:35,273] torch.distributed.run: [WARNING] *****************************************
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is Using device=cuda
our tp world size is 4
our tp world size isLoading model ...4
 4our tp world size is
our tp world size is 
 our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size isour tp world size is 4
our tp world size is  4
our tp world size is4
4
our tp world size is  4our tp world size is our tp world size is4

4 our tp world size is our tp world size is
44
 4our tp world size is 
our tp world size is 
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is4our tp world size is our tp world size is  
4
4
4our tp world size is our tp world size isour tp world size is 
4
 4
our tp world size isour tp world size is 4
our tp world size is  4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is4
4
our tp world size is  our tp world size is our tp world size is 4
4
4
4
our tp world size isour tp world size is our tp world size is our tp world size is  44
4
4

our tp world size isour tp world size is our tp world size is our tp world size is  44
4
4

our tp world size is our tp world size is our tp world size is our tp world size is 4
4
4
4our tp world size is our tp world size is our tp world size is 
44
4
our tp world size is 
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 44
our tp world size is 4

our tp world size is 4our tp world size is our tp world size is 4

our tp world size is4
4our tp world size is  4our tp world size is 
4

our tp world size is4
our tp world size is our tp world size is  4our tp world size is 4
4

4
our tp world size is our tp world size is our tp world size is our tp world size is4
4
4 our tp world size is our tp world size is 
4
4
4our tp world size isour tp world size isour tp world size is 
 4 44
our tp world size is 

our tp world size is 4
our tp world size isour tp world size is4
our tp world size is  4 4applying tp to block 0
4


applying tp to block 0
our tp world size is our tp world size is our tp world size isapplying tp to block 0
44
 4applying tp to block 0

our tp world size is 
applying tp to block 0
our tp world size is 4
our tp world size is applying tp to block 0
4
our tp world size is 4
applying tp to block 0
our tp world size is 4our tp world size isapplying tp to block 0
4

 4applying tp to block 0
our tp world size is our tp world size is
applying tp to block 0
4 4our tp world size isapplying tp to block 0


our tp world size is applying tp to block 0
our tp world size is 44
applying tp to block 0
 4
our tp world size isapplying tp to block 0

our tp world size is  4applying tp to block 0
our tp world size is 4

applying tp to block 0
4
our tp world size is our tp world size is applying tp to block 0
Applying tensor parallel to model ...
4
4
applying tp to block 0applying tp to block 0our tp world size is 
applying tp to block 0

applying tp to block 04
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0


applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
we finish operating the TP!
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
we finish operating the TP!we finish operating the TP!

GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is False
models all reduce stream is None
Time to load model: 1.81 seconds
the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 76.84 sec
Time for inference -4: 169.21 sec total, 6.05 tokens/sec
Bandwidth achieved: 27.48 GB/s
FLOPS achieved: 0.22 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.94 sec
Time for inference -3: 6.78 sec total, 150.96 tokens/sec
Bandwidth achieved: 685.50 GB/s
FLOPS achieved: 5.48 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.05 sec
Time for inference -2: 5.45 sec total, 187.94 tokens/sec
Bandwidth achieved: 853.43 GB/s
FLOPS achieved: 6.83 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.06 sec
Time for inference -1: 5.46 sec total, 187.50 tokens/sec
Bandwidth achieved: 851.41 GB/s
FLOPS achieved: 6.81 TF/s

the shape of input is torch.Size([4, 1024])
Compilation time: 5.47 seconds
the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.06 sec
Time for inference 1: 5.44 sec total, 188.07 tokens/sec
Bandwidth achieved: 854.00 GB/s
FLOPS achieved: 6.83 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.05 sec
Time for inference 2: 5.45 sec total, 187.82 tokens/sec
Bandwidth achieved: 852.89 GB/s
FLOPS achieved: 6.82 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.06 sec
Time for inference 3: 5.48 sec total, 186.79 tokens/sec
Bandwidth achieved: 848.17 GB/s
FLOPS achieved: 6.79 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.07 sec
Time for inference 4: 5.48 sec total, 186.94 tokens/sec
Bandwidth achieved: 848.87 GB/s
FLOPS achieved: 6.79 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.06 sec
Time for inference 5: 5.47 sec total, 187.34 tokens/sec
Bandwidth achieved: 850.70 GB/s
FLOPS achieved: 6.81 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.06 sec
Time for inference 6: 5.47 sec total, 187.10 tokens/sec
Bandwidth achieved: 849.60 GB/s
FLOPS achieved: 6.80 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.06 sec
Time for inference 7: 5.47 sec total, 187.31 tokens/sec
Bandwidth achieved: 850.55 GB/s
FLOPS achieved: 6.80 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.05 sec
Time for inference 8: 5.46 sec total, 187.49 tokens/sec
Bandwidth achieved: 851.35 GB/s
FLOPS achieved: 6.81 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.06 sec
Time for inference 9: 5.43 sec total, 188.64 tokens/sec
Bandwidth achieved: 856.61 GB/s
FLOPS achieved: 6.85 TF/s

the shape of input is torch.Size([4, 1024])
tokens we generated: 1024
Time for prefill: 0.05 sec
Time for inference 10: 5.43 sec total, 188.62 tokens/sec
Bandwidth achieved: 856.52 GB/s
FLOPS achieved: 6.85 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.12 sec
Average tokens/sec: 184.81
Memory used: 9.36 GB
