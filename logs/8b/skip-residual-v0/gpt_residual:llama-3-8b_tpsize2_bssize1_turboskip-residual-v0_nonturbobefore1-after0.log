[2024-09-13 10:36:25,576] torch.distributed.run: [WARNING] 
[2024-09-13 10:36:25,576] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 10:36:25,576] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 10:36:25,576] torch.distributed.run: [WARNING] *****************************************
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is Using device=cuda
2
Loading model ...
our tp world size is 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2our tp world size is 
our tp world size is2
 2our tp world size is 
our tp world size is2
 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0our tp world size is 
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
Applying tensor parallel to model ...
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0

applying tp to block 0
we finish operating the TP!
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is False
models all reduce stream is None
Time to load model: 0.91 seconds
the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 88.14 sec
Time for inference -4: 165.63 sec total, 6.18 tokens/sec
Bandwidth achieved: 49.65 GB/s
FLOPS achieved: 0.10 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.48 sec
Time for inference -3: 5.66 sec total, 181.03 tokens/sec
Bandwidth achieved: 1453.80 GB/s
FLOPS achieved: 2.91 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference -2: 4.94 sec total, 207.19 tokens/sec
Bandwidth achieved: 1663.83 GB/s
FLOPS achieved: 3.33 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference -1: 4.95 sec total, 206.74 tokens/sec
Bandwidth achieved: 1660.26 GB/s
FLOPS achieved: 3.32 TF/s

the shape of input is torch.Size([1, 1024])
Compilation time: 5.00 seconds
the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 1: 4.99 sec total, 205.22 tokens/sec
Bandwidth achieved: 1648.02 GB/s
FLOPS achieved: 3.30 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 2: 5.00 sec total, 204.83 tokens/sec
Bandwidth achieved: 1644.85 GB/s
FLOPS achieved: 3.29 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 3: 4.99 sec total, 205.38 tokens/sec
Bandwidth achieved: 1649.32 GB/s
FLOPS achieved: 3.30 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 4: 4.98 sec total, 205.66 tokens/sec
Bandwidth achieved: 1651.52 GB/s
FLOPS achieved: 3.30 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 5: 4.98 sec total, 205.45 tokens/sec
Bandwidth achieved: 1649.89 GB/s
FLOPS achieved: 3.30 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 6: 4.97 sec total, 206.04 tokens/sec
Bandwidth achieved: 1654.58 GB/s
FLOPS achieved: 3.31 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 7: 4.98 sec total, 205.60 tokens/sec
Bandwidth achieved: 1651.06 GB/s
FLOPS achieved: 3.30 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 8: 4.94 sec total, 207.15 tokens/sec
Bandwidth achieved: 1663.49 GB/s
FLOPS achieved: 3.33 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 9: 4.94 sec total, 207.49 tokens/sec
Bandwidth achieved: 1666.25 GB/s
FLOPS achieved: 3.33 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 10: 4.94 sec total, 207.29 tokens/sec
Bandwidth achieved: 1664.63 GB/s
FLOPS achieved: 3.33 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.06 sec
Average tokens/sec: 204.24
Memory used: 10.62 GB
