[2024-09-13 11:24:39,648] torch.distributed.run: [WARNING] 
[2024-09-13 11:24:39,648] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 11:24:39,648] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 11:24:39,648] torch.distributed.run: [WARNING] *****************************************
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is 2
our tp world size is Using device=cuda
2
Loading model ...
our tp world size is 2
our tp world size is our tp world size is 2
2
our tp world size is 2our tp world size is 
2
our tp world size is our tp world size is 22

our tp world size is 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is 2our tp world size is 
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
our tp world size is our tp world size is 2
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
our tp world size is applying tp to block 0
2
applying tp to block 0
Applying tensor parallel to model ...
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=3072, bias=False)
        (wo): Linear(in_features=2048, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=14336, bias=False)
        (w2): Linear(in_features=7168, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is True
models all reduce stream is None
Time to load model: 0.51 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 72.20 sec
Time for inference -4: 187.15 sec total, 5.47 tokens/sec
Bandwidth achieved: 43.94 GB/s
FLOPS achieved: 2.81 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 1.19 sec
Time for inference -3: 13.53 sec total, 75.67 tokens/sec
Bandwidth achieved: 607.65 GB/s
FLOPS achieved: 38.89 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.61 sec
Time for inference -2: 12.38 sec total, 82.70 tokens/sec
Bandwidth achieved: 664.12 GB/s
FLOPS achieved: 42.50 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference -1: 12.38 sec total, 82.71 tokens/sec
Bandwidth achieved: 664.22 GB/s
FLOPS achieved: 42.51 TF/s

the shape of input is torch.Size([32, 1024])
Compilation time: 12.38 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 1: 12.38 sec total, 82.72 tokens/sec
Bandwidth achieved: 664.29 GB/s
FLOPS achieved: 42.51 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 2: 12.38 sec total, 82.73 tokens/sec
Bandwidth achieved: 664.38 GB/s
FLOPS achieved: 42.52 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 3: 12.38 sec total, 82.73 tokens/sec
Bandwidth achieved: 664.38 GB/s
FLOPS achieved: 42.52 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 4: 12.38 sec total, 82.73 tokens/sec
Bandwidth achieved: 664.35 GB/s
FLOPS achieved: 42.52 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 5: 12.37 sec total, 82.78 tokens/sec
Bandwidth achieved: 664.79 GB/s
FLOPS achieved: 42.55 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.61 sec
Time for inference 6: 12.38 sec total, 82.72 tokens/sec
Bandwidth achieved: 664.29 GB/s
FLOPS achieved: 42.51 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 7: 12.37 sec total, 82.77 tokens/sec
Bandwidth achieved: 664.66 GB/s
FLOPS achieved: 42.54 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.61 sec
Time for inference 8: 12.38 sec total, 82.72 tokens/sec
Bandwidth achieved: 664.28 GB/s
FLOPS achieved: 42.51 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 9: 12.39 sec total, 82.66 tokens/sec
Bandwidth achieved: 663.78 GB/s
FLOPS achieved: 42.48 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.60 sec
Time for inference 10: 12.39 sec total, 82.65 tokens/sec
Bandwidth achieved: 663.76 GB/s
FLOPS achieved: 42.48 TF/s

==========
Batch Size: 32
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.65 sec
Average tokens/sec: 82.18
Memory used: 45.83 GB
