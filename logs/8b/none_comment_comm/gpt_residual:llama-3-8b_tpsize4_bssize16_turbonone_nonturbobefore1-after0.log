[2024-09-13 11:06:17,636] torch.distributed.run: [WARNING] 
[2024-09-13 11:06:17,636] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 11:06:17,636] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 11:06:17,636] torch.distributed.run: [WARNING] *****************************************
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
Using device=cuda
our tp world size is our tp world size isour tp world size is Loading model ...
4
 44
our tp world size is our tp world size is 
our tp world size is 44
our tp world size is 4
our tp world size isour tp world size is4
 4 4
our tp world size is 

our tp world size is 4
our tp world size is our tp world size is 4our tp world size is 4
4

4
our tp world size is our tp world size is our tp world size isour tp world size is 4
4 44
our tp world size is 

our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is4
4
our tp world size is  4our tp world size is our tp world size is 4

4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4we finish operating the TP!
our tp world size is our tp world size is 
4
4our tp world size isour tp world size is 
 44
our tp world size is 
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
applying tp to block 0
4
our tp world size is applying tp to block 0
our tp world size is 4applying tp to block 04


applying tp to block 0Applying tensor parallel to model ...
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0


applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0


applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0we finish operating the TP!
applying tp to block 0

applying tp to block 0applying tp to block 0

applying tp to block 0
applying tp to block 0we finish operating the TP!

applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is True
models all reduce stream is None
Time to load model: 1.53 seconds
the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 72.89 sec
Time for inference -4: 154.98 sec total, 6.61 tokens/sec
Bandwidth achieved: 30.00 GB/s
FLOPS achieved: 0.96 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.57 sec
Time for inference -3: 6.32 sec total, 162.12 tokens/sec
Bandwidth achieved: 736.16 GB/s
FLOPS achieved: 23.56 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference -2: 5.74 sec total, 178.53 tokens/sec
Bandwidth achieved: 810.69 GB/s
FLOPS achieved: 25.94 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference -1: 5.68 sec total, 180.14 tokens/sec
Bandwidth achieved: 818.00 GB/s
FLOPS achieved: 26.18 TF/s

the shape of input is torch.Size([16, 1024])
Compilation time: 5.73 seconds
the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 1: 5.74 sec total, 178.39 tokens/sec
Bandwidth achieved: 810.05 GB/s
FLOPS achieved: 25.92 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 2: 5.76 sec total, 177.71 tokens/sec
Bandwidth achieved: 806.96 GB/s
FLOPS achieved: 25.82 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 3: 5.77 sec total, 177.60 tokens/sec
Bandwidth achieved: 806.44 GB/s
FLOPS achieved: 25.81 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 4: 5.71 sec total, 179.36 tokens/sec
Bandwidth achieved: 814.44 GB/s
FLOPS achieved: 26.06 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 5: 5.73 sec total, 178.84 tokens/sec
Bandwidth achieved: 812.10 GB/s
FLOPS achieved: 25.99 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 6: 5.69 sec total, 179.81 tokens/sec
Bandwidth achieved: 816.50 GB/s
FLOPS achieved: 26.13 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 7: 5.68 sec total, 180.30 tokens/sec
Bandwidth achieved: 818.72 GB/s
FLOPS achieved: 26.20 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 8: 5.70 sec total, 179.59 tokens/sec
Bandwidth achieved: 815.48 GB/s
FLOPS achieved: 26.10 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 9: 5.68 sec total, 180.19 tokens/sec
Bandwidth achieved: 818.22 GB/s
FLOPS achieved: 26.18 TF/s

the shape of input is torch.Size([16, 1024])
tokens we generated: 1024
Time for prefill: 0.17 sec
Time for inference 10: 5.69 sec total, 180.12 tokens/sec
Bandwidth achieved: 817.90 GB/s
FLOPS achieved: 26.17 TF/s

==========
Batch Size: 16
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.20 sec
Average tokens/sec: 177.90
Memory used: 19.07 GB
