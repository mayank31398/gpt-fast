[2024-09-13 09:39:07,765] torch.distributed.run: [WARNING] 
[2024-09-13 09:39:07,765] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 09:39:07,765] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 09:39:07,765] torch.distributed.run: [WARNING] *****************************************
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is our tp world size isour tp world size is4
 4 4our tp world size is Using device=cuda


4
Loading model ...
our tp world size is our tp world size is our tp world size isour tp world size is4
4
 4 4our tp world size is our tp world size is 
our tp world size is
4
4
 4our tp world size is our tp world size is our tp world size is 
44
4
our tp world size is 
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size isour tp world size is4
4
 4 our tp world size is our tp world size is 
4
44
our tp world size is our tp world size is 
our tp world size isour tp world size is4
4
  4our tp world size is our tp world size is 4

4
4
our tp world size is our tp world size is our tp world size is our tp world size is 44
4
4

our tp world size is our tp world size is our tp world size is our tp world size is 4
4
4
4our tp world size isour tp world size is our tp world size is 
 44
4
our tp world size is 
our tp world size is our tp world size is 4
our tp world size is 4
4
our tp world size is 4
our tp world size is our tp world size is 4
our tp world size is 4
4our tp world size is 4
our tp world size is 
4
our tp world size is4
our tp world size is our tp world size is  4our tp world size is 4
4

our tp world size is4our tp world size is our tp world size is  4
4
4

our tp world size is our tp world size is our tp world size is our tp world size is 4
4
44
our tp world size is our tp world size is 
our tp world size is 4
4
our tp world size is 4
our tp world size isour tp world size isour tp world size is 4 4 44


our tp world size is
our tp world size is our tp world size is  4our tp world size is 4
4
our tp world size is4
our tp world size is
our tp world size is our tp world size is  4 44
4


our tp world size isour tp world size is our tp world size is our tp world size is  44
4
4

our tp world size is our tp world size is our tp world size isour tp world size is 4
4
 44
our tp world size is our tp world size is 
our tp world size isour tp world size is4
4
 4 4our tp world size is our tp world size is 

our tp world size is4
4
our tp world size is  our tp world size isour tp world size is 4
4
 4
our tp world size isour tp world size is 4
our tp world size is  44our tp world size is 4


4
our tp world size is our tp world size is our tp world size is4
4
 4we finish operating the TP!
our tp world size is our tp world size is
our tp world size is4  4
4

our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size isour tp world size isour tp world size is  4 44


our tp world size is our tp world size is 4
4
we finish operating the TP!
our tp world size is 4
we finish operating the TP!
our tp world size is 4
our tp world size is 4
Applying tensor parallel to model ...
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
models all reduce stream is None
Time to load model: 0.74 seconds
the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 72.73 sec
Time for inference -4: 161.66 sec total, 6.33 tokens/sec
Bandwidth achieved: 28.76 GB/s
FLOPS achieved: 0.06 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.68 sec
Time for inference -3: 4.34 sec total, 235.91 tokens/sec
Bandwidth achieved: 1071.25 GB/s
FLOPS achieved: 2.14 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference -2: 3.20 sec total, 320.03 tokens/sec
Bandwidth achieved: 1453.22 GB/s
FLOPS achieved: 2.91 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference -1: 3.21 sec total, 319.45 tokens/sec
Bandwidth achieved: 1450.60 GB/s
FLOPS achieved: 2.90 TF/s

the shape of input is torch.Size([1, 1024])
Compilation time: 3.15 seconds
the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 1: 3.15 sec total, 324.99 tokens/sec
Bandwidth achieved: 1475.73 GB/s
FLOPS achieved: 2.95 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.03 sec
Time for inference 2: 3.14 sec total, 325.93 tokens/sec
Bandwidth achieved: 1480.00 GB/s
FLOPS achieved: 2.96 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 3: 3.13 sec total, 326.77 tokens/sec
Bandwidth achieved: 1483.80 GB/s
FLOPS achieved: 2.97 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 4: 3.14 sec total, 326.11 tokens/sec
Bandwidth achieved: 1480.83 GB/s
FLOPS achieved: 2.96 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 5: 3.18 sec total, 321.90 tokens/sec
Bandwidth achieved: 1461.69 GB/s
FLOPS achieved: 2.92 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 6: 3.15 sec total, 324.67 tokens/sec
Bandwidth achieved: 1474.26 GB/s
FLOPS achieved: 2.95 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 7: 3.13 sec total, 326.98 tokens/sec
Bandwidth achieved: 1484.78 GB/s
FLOPS achieved: 2.97 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 8: 3.17 sec total, 322.65 tokens/sec
Bandwidth achieved: 1465.12 GB/s
FLOPS achieved: 2.93 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 9: 3.14 sec total, 325.89 tokens/sec
Bandwidth achieved: 1479.83 GB/s
FLOPS achieved: 2.96 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 10: 3.18 sec total, 321.64 tokens/sec
Bandwidth achieved: 1460.52 GB/s
FLOPS achieved: 2.92 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 11: 3.13 sec total, 326.87 tokens/sec
Bandwidth achieved: 1484.28 GB/s
FLOPS achieved: 2.97 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 12: 3.20 sec total, 319.71 tokens/sec
Bandwidth achieved: 1451.75 GB/s
FLOPS achieved: 2.90 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 13: 3.14 sec total, 325.75 tokens/sec
Bandwidth achieved: 1479.20 GB/s
FLOPS achieved: 2.96 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 14: 3.19 sec total, 321.33 tokens/sec
Bandwidth achieved: 1459.10 GB/s
FLOPS achieved: 2.92 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 15: 3.21 sec total, 318.89 tokens/sec
Bandwidth achieved: 1448.04 GB/s
FLOPS achieved: 2.90 TF/s

the shape of input is torch.Size([1, 1024])
tokens we generated: 1024
Time for prefill: 0.02 sec
Time for inference 16: 3.13 sec total, 326.88 tokens/sec
Bandwidth achieved: 1484.33 GB/s
FLOPS achieved: 2.97 TF/s

==========
Batch Size: 1
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.05 sec
Average tokens/sec: 319.07
Memory used: 6.78 GB
