[2024-09-13 11:31:16,851] torch.distributed.run: [WARNING] 
[2024-09-13 11:31:16,851] torch.distributed.run: [WARNING] *****************************************
[2024-09-13 11:31:16,851] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-09-13 11:31:16,851] torch.distributed.run: [WARNING] *****************************************
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
applying tp to block 0
applying tp to block 0
Using device=cuda
applying tp to block 0
our tp world size is our tp world size isLoading model ...
applying tp to block 04
 4our tp world size is 
our tp world size is 
4
applying tp to block 0
4
our tp world size is our tp world size is applying tp to block 0
our tp world size is 4
4
applying tp to block 0
4
our tp world size is our tp world size is applying tp to block 0
our tp world size is 4
4
applying tp to block 0
4our tp world size is our tp world size is applying tp to block 0

4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
44
applying tp to block 0
our tp world size is 
our tp world size is applying tp to block 0
4our tp world size is 4applying tp to block 0

4

applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size is our tp world size is applying tp to block 0
4
4
4
applying tp to block 0
our tp world size is our tp world size isour tp world size is applying tp to block 0
4
 44
applying tp to block 0
our tp world size is 
our tp world size is applying tp to block 0
4
our tp world size is 4
applying tp to block 0
our tp world size is 4
our tp world size is applying tp to block 0
4
our tp world size is4
applying tp to block 0
our tp world size is our tp world size is applying tp to block 0
 4
4
applying tp to block 0
4
our tp world size isour tp world size isapplying tp to block 0
our tp world size is  4 4applying tp to block 0
4


we finish operating the TP!
our tp world size is our tp world size isour tp world size is 4
 4our tp world size is 4

4our tp world size isour tp world size is 
our tp world size is 4 44


our tp world size isour tp world size is  4our tp world size is4

 4our tp world size is our tp world size is 
our tp world size is4
4
 4our tp world size is our tp world size is 
44
our tp world size is
our tp world size is  4our tp world size is 4

4
our tp world size isour tp world size is our tp world size is  444


our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size is our tp world size is 4
4
4
our tp world size is our tp world size isour tp world size is 4
 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is 4
our tp world size is4
our tp world size is  4our tp world size is 4

4
our tp world size isour tp world size is our tp world size is  44
4
our tp world size is 
our tp world size is 4
our tp world size is4
our tp world size is 4our tp world size is  4
our tp world size is4

 applying tp to block 0Applying tensor parallel to model ...4


our tp world size isapplying tp to block 0
applying tp to block 0
 4applying tp to block 0
applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0


applying tp to block 0applying tp to block 0applying tp to block 0


applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0applying tp to block 0


applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0


applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0applying tp to block 0applying tp to block 0


applying tp to block 0applying tp to block 0
applying tp to block 0

applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
applying tp to block 0we finish operating the TP!

applying tp to block 0
applying tp to block 0
applying tp to block 0
we finish operating the TP!
GPTResidual(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x TurboTransformerBlock(
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=1536, bias=False)
        (wo): Linear(in_features=1024, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=7168, bias=False)
        (w2): Linear(in_features=3584, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
we comment comm is True
models all reduce stream is None
Time to load model: 1.08 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 73.86 sec
Time for inference -4: 157.27 sec total, 6.51 tokens/sec
Bandwidth achieved: 29.57 GB/s
FLOPS achieved: 1.89 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.95 sec
Time for inference -3: 8.38 sec total, 122.18 tokens/sec
Bandwidth achieved: 554.78 GB/s
FLOPS achieved: 35.51 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference -2: 7.54 sec total, 135.81 tokens/sec
Bandwidth achieved: 616.71 GB/s
FLOPS achieved: 39.47 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference -1: 7.58 sec total, 135.17 tokens/sec
Bandwidth achieved: 613.77 GB/s
FLOPS achieved: 39.28 TF/s

the shape of input is torch.Size([32, 1024])
Compilation time: 7.52 seconds
the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 1: 7.51 sec total, 136.30 tokens/sec
Bandwidth achieved: 618.93 GB/s
FLOPS achieved: 39.61 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 2: 7.52 sec total, 136.17 tokens/sec
Bandwidth achieved: 618.34 GB/s
FLOPS achieved: 39.57 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 3: 7.54 sec total, 135.83 tokens/sec
Bandwidth achieved: 616.80 GB/s
FLOPS achieved: 39.48 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 4: 7.51 sec total, 136.30 tokens/sec
Bandwidth achieved: 618.93 GB/s
FLOPS achieved: 39.61 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 5: 7.55 sec total, 135.63 tokens/sec
Bandwidth achieved: 615.88 GB/s
FLOPS achieved: 39.42 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 6: 7.51 sec total, 136.30 tokens/sec
Bandwidth achieved: 618.90 GB/s
FLOPS achieved: 39.61 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 7: 7.55 sec total, 135.72 tokens/sec
Bandwidth achieved: 616.28 GB/s
FLOPS achieved: 39.44 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 8: 7.54 sec total, 135.79 tokens/sec
Bandwidth achieved: 616.61 GB/s
FLOPS achieved: 39.46 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 9: 7.51 sec total, 136.31 tokens/sec
Bandwidth achieved: 618.98 GB/s
FLOPS achieved: 39.61 TF/s

the shape of input is torch.Size([32, 1024])
tokens we generated: 1024
Time for prefill: 0.34 sec
Time for inference 10: 7.51 sec total, 136.26 tokens/sec
Bandwidth achieved: 618.76 GB/s
FLOPS achieved: 39.60 TF/s

==========
Batch Size: 32
Prompt Length: 1024
Generated tokens: 1024
Average prefill latency: 0.38 sec
Average tokens/sec: 134.91
Memory used: 34.62 GB
