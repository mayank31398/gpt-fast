W1201 22:43:42.337000 1297029 site-packages/torch/distributed/run.py:793] 
W1201 22:43:42.337000 1297029 site-packages/torch/distributed/run.py:793] *****************************************
W1201 22:43:42.337000 1297029 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1201 22:43:42.337000 1297029 site-packages/torch/distributed/run.py:793] *****************************************
DeviceMesh('cuda', [[0, 1], [2, 3]], mesh_dim_names=('pp', 'tp'))
DeviceMesh('cuda', [[0, 1], [2, 3]], mesh_dim_names=('pp', 'tp'))
Using device=cuda
Loading model ...
DeviceMesh('cuda', [[0, 1], [2, 3]], mesh_dim_names=('pp', 'tp'))
DeviceMesh('cuda', [[0, 1], [2, 3]], mesh_dim_names=('pp', 'tp'))
GPTParallel(
  (layers): ModuleList(
    (0-39): 40 x ParallelTransformerBlock(
      semi_compiled = False
      (attention): FuseAttentionMLP(
        (wqkv1): Linear(in_features=8192, out_features=33792, bias=False)
        (wo): Linear(in_features=4096, out_features=8192, bias=False)
        (w2): Linear(in_features=14336, out_features=8192, bias=False)
      )
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=8192, out_features=128256, bias=False)
)
Time to load model: 0.97 seconds
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
Compiling prefill with dynamic=False
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/site-packages/torch/_inductor/compile_fx.py:222: UserWarning: TensorFloat32 tensor cores for float32 matrix multiplication available but not enabled. Consider setting `torch.set_float32_matmul_precision('high')` for better performance.
  warnings.warn(
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/site-packages/torch/_inductor/compile_fx.py:222: UserWarning: TensorFloat32 tensor cores for float32 matrix multiplication available but not enabled. Consider setting `torch.set_float32_matmul_precision('high')` for better performance.
  warnings.warn(
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/site-packages/torch/_inductor/compile_fx.py:222: UserWarning: TensorFloat32 tensor cores for float32 matrix multiplication available but not enabled. Consider setting `torch.set_float32_matmul_precision('high')` for better performance.
  warnings.warn(
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/site-packages/torch/_inductor/compile_fx.py:222: UserWarning: TensorFloat32 tensor cores for float32 matrix multiplication available but not enabled. Consider setting `torch.set_float32_matmul_precision('high')` for better performance.
  warnings.warn(
Prefill latency: 282.7786084479885 sec
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
Decode latency: 126.51892519800458 secCompilation time: 409.36 secondsCompilation time: 409.37 seconds


Compilation time: 409.27 seconds
Compilation time: 409.30 seconds
Prefill latency: 12.702347903046757 sec
Decode latency: 31.42801728390623 sec
Prefill latency: 12.505667669000104 sec
Decode latency: 31.42961509199813 sec
Prefill latency: 12.51041148090735 sec
Decode latency: 31.421987392939627 sec
Prefill latency: 12.50256802199874 sec
Decode latency: 31.426487969001755 sec
Prefill latency: 12.534326758002862 sec
Decode latency: 31.429343742900528 sec
Time for inference 1: 43.97 sec total, 745.30 tokens/sec
Decode latency: 31.43 sec
Prefill latency: 12.53 sec
Bandwidth achieved: 27074.84 GB/s
FLOPS achieved: 81.22 TF/s

Prefill latency: 12.506196801085025 sec
Decode latency: 31.42425225896295 sec
Time for inference 2: 43.93 sec total, 745.86 tokens/sec
Decode latency: 31.42 sec
Prefill latency: 12.51 sec
Bandwidth achieved: 27095.28 GB/s
FLOPS achieved: 81.29 TF/s

Prefill latency: 12.499200780992396 sec
Decode latency: 31.420507697970606 sec
Time for inference 3: 43.92 sec total, 746.04 tokens/sec
Decode latency: 31.42 sec
Prefill latency: 12.50 sec
Bandwidth achieved: 27101.93 GB/s
FLOPS achieved: 81.31 TF/s

Prefill latency: 12.575794853037223 sec
Decode latency: 31.423664545989595 sec
Time for inference 4: 44.00 sec total, 744.69 tokens/sec
Decode latency: 31.42 sec
Prefill latency: 12.58 sec
Bandwidth achieved: 27052.93 GB/s
FLOPS achieved: 81.16 TF/s

Prefill latency: 12.468817741028033 sec
Decode latency: 31.425949092023075 sec
Time for inference 5: 43.90 sec total, 746.47 tokens/sec
Decode latency: 31.43 sec
Prefill latency: 12.47 sec
Bandwidth achieved: 27117.33 GB/s
FLOPS achieved: 81.35 TF/s

Prefill latency: 12.57554158498533 sec
Decode latency: 31.425190830952488 sec
Time for inference 6: 44.00 sec total, 744.67 tokens/sec
Decode latency: 31.43 sec
Prefill latency: 12.58 sec
Bandwidth achieved: 27052.09 GB/s
FLOPS achieved: 81.16 TF/s

Prefill latency: 12.5205806910526 sec
Decode latency: 31.42751991993282 sec
Time for inference 7: 43.95 sec total, 745.56 tokens/sec
Decode latency: 31.43 sec
Prefill latency: 12.52 sec
Bandwidth achieved: 27084.47 GB/s
FLOPS achieved: 81.25 TF/s

Prefill latency: 12.500919423997402 sec
Decode latency: 31.43098279403057 sec
Time for inference 8: 43.93 sec total, 745.84 tokens/sec
Decode latency: 31.43 sec
Prefill latency: 12.50 sec
Bandwidth achieved: 27094.46 GB/s
FLOPS achieved: 81.28 TF/s

Prefill latency: 12.543873467948288 sec
Decode latency: 31.43448429601267 sec
Time for inference 9: 43.98 sec total, 745.05 tokens/sec
Decode latency: 31.43 sec
Prefill latency: 12.54 sec
Bandwidth achieved: 27065.82 GB/s
FLOPS achieved: 81.20 TF/s

Prefill latency: 12.533264643978328 sec
Decode latency: 31.422431496088393 sec
Time for inference 10: 43.96 sec total, 745.43 tokens/sec
Decode latency: 31.42 sec
Prefill latency: 12.53 sec
Bandwidth achieved: 27079.65 GB/s
FLOPS achieved: 81.24 TF/s

==========
Batch Size: 64
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 31.4264 sec
Average prefill latency: 12.5259 sec
Average tokens/sec: 745.49
Memory used: 81.19 GB
Done. we are killing the process
[rank0]:[W1201 23:00:53.020148445 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
[rank1]:[W1201 23:00:54.211084369 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
[rank2]:[W1201 23:00:54.910824448 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
