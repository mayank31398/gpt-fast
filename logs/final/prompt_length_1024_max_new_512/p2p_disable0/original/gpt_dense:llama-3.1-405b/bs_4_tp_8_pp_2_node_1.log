W1202 17:51:02.132000 3436562 site-packages/torch/distributed/run.py:793] 
W1202 17:51:02.132000 3436562 site-packages/torch/distributed/run.py:793] *****************************************
W1202 17:51:02.132000 3436562 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1202 17:51:02.132000 3436562 site-packages/torch/distributed/run.py:793] *****************************************
DeviceMesh('cuda', [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]], mesh_dim_names=('pp', 'tp'))
Using device=cuda
Loading model ...
DeviceMesh('cuda', [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]], mesh_dim_names=('pp', 'tp'))
DeviceMesh('cuda', [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]], mesh_dim_names=('pp', 'tp'))
DeviceMesh('cuda', [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]], mesh_dim_names=('pp', 'tp'))
DeviceMesh('cuda', [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]], mesh_dim_names=('pp', 'tp'))
DeviceMesh('cuda', [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]], mesh_dim_names=('pp', 'tp'))
DeviceMesh('cuda', [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]], mesh_dim_names=('pp', 'tp'))
DeviceMesh('cuda', [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]], mesh_dim_names=('pp', 'tp'))
GPTDense(
  (layers): ModuleList(
    (0-62): 63 x DenseTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=16384, out_features=2560, bias=False)
        (wo): Linear(in_features=2048, out_features=16384, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=16384, out_features=13312, bias=False)
        (w2): Linear(in_features=6656, out_features=16384, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=16384, out_features=128256, bias=False)
)
Time to load model: 1.44 seconds
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
/home/charlie/anaconda3/envs/gpt-fast/lib/python3.10/contextlib.py:103: FutureWarning: `torch.backends.cuda.sdp_kernel()` is deprecated. In the future, this context manager will be removed. Please see `torch.nn.attention.sdpa_kernel()` for the new context manager, with updated signature.
  self.gen = func(*args, **kwds)
Prefill latency: 18.184215775690973 sec
Decode latency: 65.64021798223257 sec
Compilation time: 83.57 seconds
Compilation time: 83.20 seconds
Compilation time: 83.25 seconds
Compilation time: 83.19 seconds
Compilation time: 83.18 seconds
Compilation time: 83.18 secondsCompilation time: 83.83 seconds

Compilation time: 83.32 seconds
Prefill latency: 1.3586265752092004 sec
Decode latency: 65.85197565332055 sec
Prefill latency: 1.3606733437627554 sec
Decode latency: 64.98478613235056 sec
Prefill latency: 1.3591200420632958 sec
Decode latency: 64.48284881282598 sec
Prefill latency: 1.359286698512733 sec
Decode latency: 65.61664816830307 sec
Prefill latency: 1.359669684432447 sec
Decode latency: 64.70501132216305 sec
Time for inference 1: 66.07 sec total, 31.00 tokens/sec
Decode latency: 64.71 sec
Prefill latency: 1.36 sec
Bandwidth achieved: 1703.11 GB/s
FLOPS achieved: 5.11 TF/s

Prefill latency: 1.3595709204673767 sec
Decode latency: 65.17352644447237 sec
Time for inference 2: 66.54 sec total, 30.78 tokens/sec
Decode latency: 65.17 sec
Prefill latency: 1.36 sec
Bandwidth achieved: 1691.12 GB/s
FLOPS achieved: 5.07 TF/s

Prefill latency: 1.3578181806951761 sec
Decode latency: 65.47607261966914 sec
Time for inference 3: 66.84 sec total, 30.64 tokens/sec
Decode latency: 65.48 sec
Prefill latency: 1.36 sec
Bandwidth achieved: 1683.50 GB/s
FLOPS achieved: 5.05 TF/s

Prefill latency: 1.356292332522571 sec
Decode latency: 64.23274102434516 sec
Time for inference 4: 65.59 sec total, 31.22 tokens/sec
Decode latency: 64.23 sec
Prefill latency: 1.36 sec
Bandwidth achieved: 1715.45 GB/s
FLOPS achieved: 5.15 TF/s

Prefill latency: 1.3563315095379949 sec
Decode latency: 65.82089889701456 sec
Time for inference 5: 67.18 sec total, 30.49 tokens/sec
Decode latency: 65.82 sec
Prefill latency: 1.36 sec
Bandwidth achieved: 1674.89 GB/s
FLOPS achieved: 5.02 TF/s

Prefill latency: 1.3601847998797894 sec
Decode latency: 67.25060521904379 sec
Time for inference 6: 68.61 sec total, 29.85 tokens/sec
Decode latency: 67.25 sec
Prefill latency: 1.36 sec
Bandwidth achieved: 1639.91 GB/s
FLOPS achieved: 4.92 TF/s

Prefill latency: 1.3578248238191009 sec
Decode latency: 65.39238074235618 sec
Time for inference 7: 66.75 sec total, 30.68 tokens/sec
Decode latency: 65.39 sec
Prefill latency: 1.36 sec
Bandwidth achieved: 1685.60 GB/s
FLOPS achieved: 5.06 TF/s

Prefill latency: 1.3561493596062064 sec
Decode latency: 65.58373612910509 sec
Time for inference 8: 66.94 sec total, 30.59 tokens/sec
Decode latency: 65.58 sec
Prefill latency: 1.36 sec
Bandwidth achieved: 1680.83 GB/s
FLOPS achieved: 5.04 TF/s

Prefill latency: 1.354566378518939 sec
Decode latency: 69.38418380450457 sec
Time for inference 9: 70.74 sec total, 28.95 tokens/sec
Decode latency: 69.38 sec
Prefill latency: 1.35 sec
Bandwidth achieved: 1590.57 GB/s
FLOPS achieved: 4.77 TF/s

Prefill latency: 1.3569188760593534 sec
Decode latency: 66.35899100545794 sec
Time for inference 10: 67.72 sec total, 30.24 tokens/sec
Decode latency: 66.36 sec
Prefill latency: 1.36 sec
Bandwidth achieved: 1661.57 GB/s
FLOPS achieved: 4.98 TF/s

==========
Batch Size: 4
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 65.9378 sec
Average prefill latency: 1.3575 sec
Average tokens/sec: 30.44
Memory used: 63.79 GB
Done. we are killing the process
[rank8]:[W1202 18:08:12.996572489 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
