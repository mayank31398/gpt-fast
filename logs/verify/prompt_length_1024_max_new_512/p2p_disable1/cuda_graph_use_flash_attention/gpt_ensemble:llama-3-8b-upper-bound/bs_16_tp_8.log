W1119 16:15:15.514000 2988771 site-packages/torch/distributed/run.py:793] 
W1119 16:15:15.514000 2988771 site-packages/torch/distributed/run.py:793] *****************************************
W1119 16:15:15.514000 2988771 site-packages/torch/distributed/run.py:793] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1119 16:15:15.514000 2988771 site-packages/torch/distributed/run.py:793] *****************************************
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8rank: 3, global_rank: 3, world_size: 8, global_world_size: 8

rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
flash_kv_decode is set to True
rank: 0, global_rank: 0, world_size: 8, global_world_size: 8
our world size=8
Using device=cuda
Loading model ...
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 6, global_rank: 6, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 5, global_rank: 5, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 4, global_rank: 4, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 3, global_rank: 3, world_size: 8, global_world_size: 8rank: 7, global_rank: 7, world_size: 8, global_world_size: 8

rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 2, global_rank: 2, world_size: 8, global_world_size: 8
rank: 7, global_rank: 7, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
rank: 1, global_rank: 1, world_size: 8, global_world_size: 8
GPTEnsemble(
  (tok_embeddings): Embedding(128256, 4096)
  (layers): ModuleList(
    (0-31): 32 x EnsembleTransformerBlock(
      semi_compiled = False
      (attention): Attention(
        (wqkv): Linear(in_features=4096, out_features=768, bias=False)
        (wo): Linear(in_features=512, out_features=4096, bias=False)
      )
      (feed_forward): FeedForward(
        (w1): Linear(in_features=4096, out_features=3584, bias=False)
        (w2): Linear(in_features=1792, out_features=4096, bias=False)
      )
      (ffn_norm): RMSNorm()
      (attention_norm): RMSNorm()
    )
  )
  (norm): RMSNorm()
  (output): Linear(in_features=4096, out_features=128256, bias=False)
)
Time to load model: 1.36 seconds
CUDA_GRAPH are activate
Prefill latency: 0.09696264611557126 sec
Decode latency: 2.3490682360716164 sec
Compilation time: 2.45 seconds
Prefill latency: 0.09718710510060191 sec
Compilation time: 2.47 seconds
Compilation time: 2.37 seconds
Compilation time: 2.52 seconds
Compilation time: 2.44 seconds
Compilation time: 2.53 seconds
Compilation time: 2.53 seconds
Compilation time: 2.54 seconds
Decode latency: 2.434968401910737 sec
Prefill latency: 0.09734381292946637 sec
Decode latency: 2.2947969608940184 sec
Prefill latency: 0.09719116613268852 sec
Decode latency: 2.4355444370303303 sec
Prefill latency: 0.09790347097441554 sec
Decode latency: 2.4364636989776045 sec
Prefill latency: 0.09774485998786986 sec
Decode latency: 2.320061136968434 sec
Time for inference 1: 2.42 sec total, 3386.59 tokens/sec
Decode latency: 2.32 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9469.02 GB/s
FLOPS achieved: 28.41 TF/s

Prefill latency: 0.09778284491039813 sec
Decode latency: 2.435442417860031 sec
Time for inference 2: 2.53 sec total, 3232.51 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9038.21 GB/s
FLOPS achieved: 27.11 TF/s

Prefill latency: 0.09798320312984288 sec
Decode latency: 2.4358860689681023 sec
Time for inference 3: 2.53 sec total, 3231.77 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9036.15 GB/s
FLOPS achieved: 27.11 TF/s

Prefill latency: 0.09851384698413312 sec
Decode latency: 2.4362277889158577 sec
Time for inference 4: 2.54 sec total, 3230.73 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9033.24 GB/s
FLOPS achieved: 27.10 TF/s

Prefill latency: 0.09735507518053055 sec
Decode latency: 2.4350888659246266 sec
Time for inference 5: 2.53 sec total, 3233.66 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9041.42 GB/s
FLOPS achieved: 27.12 TF/s

Prefill latency: 0.09752058796584606 sec
Decode latency: 2.362181190866977 sec
Time for inference 6: 2.46 sec total, 3329.11 tokens/sec
Decode latency: 2.36 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9308.31 GB/s
FLOPS achieved: 27.92 TF/s

Prefill latency: 0.09752367692999542 sec
Decode latency: 2.435954296030104 sec
Time for inference 7: 2.53 sec total, 3232.32 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9037.69 GB/s
FLOPS achieved: 27.11 TF/s

Prefill latency: 0.09845566097646952 sec
Decode latency: 2.436123170889914 sec
Time for inference 8: 2.54 sec total, 3230.95 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9033.85 GB/s
FLOPS achieved: 27.10 TF/s

Prefill latency: 0.0986867209430784 sec
Decode latency: 2.4355753629934043 sec
Time for inference 9: 2.54 sec total, 3231.41 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9035.13 GB/s
FLOPS achieved: 27.11 TF/s

Prefill latency: 0.09782493393868208 sec
[rank1]:[W1119 16:16:00.533327965 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank6]:[W1119 16:16:01.713683920 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 6]  using GPU 6 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank2]:[W1119 16:16:01.822908263 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank4]:[W1119 16:16:01.185157311 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 4]  using GPU 4 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Decode latency: 2.4359519449062645 sec
Time for inference 10: 2.53 sec total, 3231.96 tokens/sec
Decode latency: 2.44 sec
Prefill latency: 0.10 sec
Bandwidth achieved: 9036.67 GB/s
FLOPS achieved: 27.11 TF/s

==========
Batch Size: 16
Prompt Length: 1024
Generated tokens: 512
Average decode latency: 2.4168 sec
Average prefill latency: 0.0979 sec
Average tokens/sec: 3257.10
Memory used: 9.58 GB
[rank0]:[W1119 16:16:01.251898485 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank5]:[W1119 16:16:02.614690300 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 5]  using GPU 5 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank7]:[W1119 16:16:02.629215446 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 7]  using GPU 7 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[rank3]:[W1119 16:16:02.808349744 ProcessGroupNCCL.cpp:4393] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
Done. we are killing the process
[rank0]:[W1119 16:16:08.167788222 ProcessGroupNCCL.cpp:1374] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
